/**
  You need to create an express HTTP server in Node.js which will handle the logic of a todo list app.
  - Don't use any database, just store all the data in an array to store the todo list data (in-memory)
  - Hard todo: Try to save responses in files, so that even if u exit the app and run it again, the data remains (similar to databases)

  Each todo has a title and a description. The title is a string and the description is a string.
  Each todo should also get an unique autogenerated id every time it is created
  The expected API endpoints are defined below,

  1.GET /todos - Retrieve all todo items
    Description: Returns a list of all todo items.
    Response: 200 OK with an array of todo items in JSON format.
    Example: GET http://localhost:3000/todos
    
  2.GET /todos/:id - Retrieve a specific todo item by ID
    Description: Returns a specific todo item identified by its ID.
    Response: 200 OK with the todo item in JSON format if found, or 404 Not Found if not found.
    Example: GET http://localhost:3000/todos/123
    
  3. POST /todos - Create a new todo item
    Description: Creates a new todo item.
    Request Body: JSON object representing the todo item.
    Response: 201 Created with the ID of the created todo item in JSON format. eg: {id: 1}
    Example: POST http://localhost:3000/todos
    Request Body: { "title": "Buy groceries", "completed": false, description: "I should buy groceries" }
    
  4. PUT /todos/:id - Update an existing todo item by ID
    Description: Updates an existing todo item identified by its ID.
    Request Body: JSON object representing the updated todo item.
    Response: 200 OK if the todo item was found and updated, or 404 Not Found if not found.
    Example: PUT http://localhost:3000/todos/123
    Request Body: { "title": "Buy groceries", "completed": true }
    
  5. DELETE /todos/:id - Delete a todo item by ID
    Description: Deletes a todo item identified by its ID.
    Response: 200 OK if the todo item was found and deleted, or 404 Not Found if not found.
    Example: DELETE http://localhost:3000/todos/123

    - For any other route not defined in the server return 404

  Testing the server - run `npm run test-todoServer` command in terminal
 */





//Server Side
const express = require('express');
const bodyParser = require('body-parser');
const fs = require("fs");

const app = express();
app.use(bodyParser.json());

// //functionality
function dataRetrieval() {
    const todo = (fs.readFileSync("todos.json", "utf8"));
    let todos = JSON.parse(todo);
    return todos;
}
function update(todos) {
    fs.writeFileSync("todos.json", JSON.stringify(todos));
}


//GET
app.get("/todos", function (req, res) {
    let todos = dataRetrieval();
    res.status(200).send(todos);
})
app.get("/todos/:id", function (req, res) {
    let todos = dataRetrieval();
    let id = req.params.id;
    let response = false;
    for (let i = 0; i < todos.length; i++) {
        if (todos[i].id == id) {
            res.status(200).json(todos[i]);
            response = true;
        }
    }
    if (response == false) {
        res.status(404).send("File not found");
    }
})


// Post
app.post("/todos", function (req, res) {
    let todos = dataRetrieval();
    let body = req.body;
    let title = body.title;
    let completed = body.completed;
    let description = body.description;

    let id = todos.length + 1;
    // todos.push({
    //     id: id,
    //     title: title,
    //     completed: completed,
    //     description: description
    // })
    const newData = [{
        id: id,
        title: title,
        completed: completed,
        description: description
    }];

    let updatedData = todos.concat(newData);
    update(updatedData);
    res.status(201).json({
        id: id
    })

})

// //PUT
app.put("/todos/:id", function (req, res) {
    let todos = dataRetrieval();
    let id = req.params.id;
    let body = req.body;
    let title = body.title;
    let completed = body.completed;

    let comple = false;
    for (let i = 0; i < todos.length; i++) {
        if (todos[i].id == id) {
            todos[i].title = title;
            todos[i].completed = completed;
            comple = true;
            res.status(200).send("OK");
        }
    }
    update(todos);
    if (comple == false) {
        res.status(404).send("Not Found");
    }
})

// //Delete
app.delete("/todos/:id", function (req, res) {
    let todos = dataRetrieval();
    const id = req.params.id;
    let complete = false;
    let newTodos = [];
    let objId = 1;
    for (let i = 0; i < todos.length; i++) {
        if (todos[i].id == id) {
            complete = true;
        }
        else {
            newTodos.push({
                id: objId,
                title: todos[i].title,
                completed: todos[i].completed,
                description: todos[i].description
            });
            objId++;
        }
    }
    todos = newTodos;
    update(todos);
    if (complete == false) {
        res.status(404).send("Not Found");
    } else {
        res.status(200).send("OKAY");
    }

})

app.use("*", function (req, res) {
    res.status(404).send("Route not found")
})

const port = 3000;
app.listen(port, function () {
    console.log(`Server is running on port ${port}`);
})
module.exports = app;