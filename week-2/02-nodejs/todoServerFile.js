/**
  You need to create an express HTTP server in Node.js which will handle the logic of a todo list app.
  - Don't use any database, just store all the data in an array to store the todo list data (in-memory)
  - Hard todo: Try to save responses in files, so that even if u exit the app and run it again, the data remains (similar to databases)

  Each todo has a title and a description. The title is a string and the description is a string.
  Each todo should also get an unique autogenerated id every time it is created
  The expected API endpoints are defined below,
  1.GET /todos - Retrieve all todo items
    Description: Returns a list of all todo items.
    Response: 200 OK with an array of todo items in JSON format.
    Example: GET http://localhost:3000/todos
    
  2.GET /todos/:id - Retrieve a specific todo item by ID
    Description: Returns a specific todo item identified by its ID.
    Response: 200 OK with the todo item in JSON format if found, or 404 Not Found if not found.
    Example: GET http://localhost:3000/todos/123
    
  3. POST /todos - Create a new todo item
    Description: Creates a new todo item.
    Request Body: JSON object representing the todo item.
    Response: 201 Created with the ID of the created todo item in JSON format. eg: {id: 1}
    Example: POST http://localhost:3000/todos
    Request Body: { "title": "Buy groceries", "completed": false, description: "I should buy groceries" }
    
  4. PUT /todos/:id - Update an existing todo item by ID
    Description: Updates an existing todo item identified by its ID.
    Request Body: JSON object representing the updated todo item.
    Response: 200 OK if the todo item was found and updated, or 404 Not Found if not found.
    Example: PUT http://localhost:3000/todos/123
    Request Body: { "title": "Buy groceries", "completed": true }
    
  5. DELETE /todos/:id - Delete a todo item by ID
    Description: Deletes a todo item identified by its ID.
    Response: 200 OK if the todo item was found and deleted, or 404 Not Found if not found.
    Example: DELETE http://localhost:3000/todos/123

    - For any other route not defined in the server return 404

  Testing the server - run `npm run test-todoServer` command in terminal
 */
const express = require('express');
const bodyParser = require('body-parser');
const { v4: uuidv4 } = require('uuid');
const fs = require("fs");

const app = express();

app.use(bodyParser.json());

const filePath = "./todos.json"

app.get("/todos", (req, res) => {
  fs.readFile(filePath, "utf-8", (err, data) => {
    if (err) {
      res.status(500).send("Error reading todos")
    } else {
      let todos = JSON.parse(data);
      res.status(200).json(todos)
    }
  })
})

app.get("/todos/:id", (req, res) => {
  fs.readFile(filePath, "utf-8", (err, data) => {
    if (err) {
      res.status(500).send("Error reading todos")
    } else {
      let id = req.params.id;
      let todos = JSON.parse(data)
      let todo = todos.find((val) => val.id === id);
      if (!todo) {
        res.status(404).send("Todo Not Found")
      } else {
        res.status(200).json(todo)
      }
    }
  })
})

app.post("/todos", (req, res) => {
  let id = uuidv4();
  let todo = { ...req.body, id: id };
  fs.readFile(filePath, "utf-8", (err, data) => {
    if (err) {
      res.status(500).send("Error reading todos")
    } else {
      let todos = JSON.parse(data)
      todos.push(todo);
      fs.writeFile(filePath, JSON.stringify(todos), (err) => {
        if (err) {
          res.status(500).send("Error reading todos")
        }
        res.status(201).json({ "id": id });
      })
    }
  })
})

app.put("/todos/:id", (req, res) => {
  fs.readFile(filePath, "utf-8", (err, data) => {
    if (err) {
      res.status(500).send("Error reading todos")
    } else {
      let todos = JSON.parse(data)
      let id = req.params.id;
      let index = todos.findIndex(val => val.id === id);
      if (index == -1) {
        res.status(404).send()
      } else {
        todos[index].title = req.body.title ? req.body.title : todos[index].title;
        todos[index].description = req.body.description ? req.body.description : todos[index].description;
        todos[index].completed = req.body.completed ? req.body.completed : todos[index].completed;
        fs.writeFile(filePath, JSON.stringify(todos), (err) => {
          if (err) {
            res.status(500).send("Error reading todos")
          }
          res.status(200).json(todos[index]);
        })
      }
    }
  })
})

app.delete("/todos/:id", (req, res) => {
  fs.readFile(filePath, "utf-8", (err, data) => {
    if (err) {
      res.status(500).send("Error reading todos")
    } else {
      let id = req.params.id;
      let todos = JSON.parse(data)
      let index = todos.findIndex(val => val.id === id)
      if (index == -1) {
        res.status(404).send();
      } else {
        todos.splice(index, 1);
        fs.writeFile(filePath, JSON.stringify(todos), (err) => {
          if (err) {
            res.status(500).send("Error reading todos")
          }
          res.status(200).send();
        })
      }
    }
  })
})

app.all("*", (req, res) => {
  res.status(400).send("Page Not Found")
})

// app.listen(3000, () => {
//   console.log("Listening on Port 3000")
// })
module.exports = app;