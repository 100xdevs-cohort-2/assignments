/**
  You need to create an express HTTP server in Node.js which will handle the logic of a todo list app.
  - Don't use any database, just store all the data in an array to store the todo list data (in-memory)
  - Hard todo: Try to save responses in files, so that even if u exit the app and run it again, the data remains (similar to databases)

  Each todo has a title and a description. The title is a string and the description is a string.
  Each todo should also get an unique autogenerated id every time it is created
  The expected API endpoints are defined below,
  1.GET /todos - Retrieve all todo items
    Description: Returns a list of all todo items.
    Response: 200 OK with an array of todo items in JSON format.
    Example: GET http://localhost:3000/todos
    
  2.GET /todos/:id - Retrieve a specific todo item by ID
    Description: Returns a specific todo item identified by its ID.
    Response: 200 OK with the todo item in JSON format if found, or 404 Not Found if not found.
    Example: GET http://localhost:3000/todos/123
    
  3. POST /todos - Create a new todo item
    Description: Creates a new todo item.
    Request Body: JSON object representing the todo item.
    Response: 201 Created with the ID of the created todo item in JSON format. eg: {id: 1}
    Example: POST http://localhost:3000/todos
    Request Body: { "title": "Buy groceries", "completed": false, description: "I should buy groceries" }
    
  4. PUT /todos/:id - Update an existing todo item by ID
    Description: Updates an existing todo item identified by its ID.
    Request Body: JSON object representing the updated todo item.
    Response: 200 OK if the todo item was found and updated, or 404 Not Found if not found.
    Example: PUT http://localhost:3000/todos/123
    Request Body: { "title": "Buy groceries", "completed": true }
    
  5. DELETE /todos/:id - Delete a todo item by ID
    Description: Deletes a todo item identified by its ID.
    Response: 200 OK if the todo item was found and deleted, or 404 Not Found if not found.
    Example: DELETE http://localhost:3000/todos/123

    - For any other route not defined in the server return 404

  Testing the server - run `npm run test-todoServer` command in terminal
 */
const express = require('express');
const bodyParser = require('body-parser');
const fs = require('fs');
const path = require('path');

const app = express();
const filePath = path.join(`${__dirname}/todos.json`);

app.use(bodyParser.json());

/**
 * @summary Returns the index of `TODO` in the array
 * @param {{ title: string; description: string; }[]} arr
 * @param {number} id
 * @returns {number}
 */
const findIndex = (arr, id) => {
  for (let i = 0; i < arr.length; i++) if (arr[i].id === id) return i;
  return -1;
};

/**
 * @summary Removes the `TODO` from the array
 * @param {{ title: string; description: string; }[]} arr
 * @param {number} index
 * @returns {{ title: string; description: string; }[]}
 */
const removeAtIndex = (arr, index) => {
  const newArray = [];
  for (let i = 0; i < arr.length; i++) {
    if (i !== index) newArray.push(arr[i]);
  }
  return newArray;
};

app.get('/todos', (_, res) => {
  fs.readFile(filePath, 'utf-8', (err, data) => {
    if (err) throw err;
    res.json(JSON.parse(data));
  });
});

app.get('/todos/:id', (req, res) => {
  const todoId = parseInt(req.params.id);
  fs.readFile(filePath, 'utf-8', (err, data) => {
    if (err) throw err;
    const TODOS = JSON.parse(data);
    const todoIndex = findIndex(TODOS, todoId);
    todoIndex === -1
      ? res.status(404).send('Not Found')
      : res.json(TODOS[todoIndex]);
  });
});

app.post('/todos', (req, res) => {
  const newTodo = {
    id: Math.floor(Math.random() * 1000000),
    title: req.body.title,
    description: req.body.description,
  };

  fs.readFile(filePath, 'utf-8', (err, data) => {
    if (err) throw err;
    const TODOS = JSON.parse(data);
    TODOS.push(newTodo);
    fs.writeFile(
      filePath,
      JSON.stringify(TODOS, null, 2),
      { encoding: 'utf8' },
      (err) => {
        if (err) throw err;
        res.status(201).json(newTodo);
      }
    );
  });
});

app.put('/todos/:id', (req, res) => {
  const todoId = parseInt(req.params.id);
  fs.readFile(filePath, 'utf-8', (err, data) => {
    if (err) throw err;
    const TODOS = JSON.parse(data);
    const todoIndex = findIndex(TODOS, todoId);
    if (todoIndex === -1) {
      res.status(404).send('Not Found');
    } else {
      TODOS[todoIndex].title = req.body.title;
      TODOS[todoIndex].description = req.body.description;
      fs.writeFile(
        filePath,
        JSON.stringify(TODOS, null, 2),
        { encoding: 'utf8' },
        (err) => {
          if (err) throw err;
          res.json(TODOS[todoIndex]);
        }
      );
    }
  });
});

app.delete('/todos/:id', (req, res) => {
  const todoId = parseInt(req.params.id);
  fs.readFile(filePath, 'utf-8', (err, data) => {
    if (err) throw err;
    const TODOS = JSON.parse(data);
    const todoIndex = findIndex(TODOS, todoId);
    if (todoIndex === -1) {
      res.status(404).send('Not Found');
    } else {
      fs.writeFile(
        filePath,
        JSON.stringify(removeAtIndex(TODOS, todoIndex), null, 2),
        { encoding: 'utf8' },
        (err) => {
          if (err) throw err;
          res.status(200).send('Todo was deleted');
        }
      );
    }
  });
});

// for all other routes, return 404
app.use((_, res) => res.status(404).send('Not Found'));

module.exports = app;
