/**
  You need to create an express HTTP server in Node.js which will handle the logic of a todo list app.
  - Don't use any database, just store all the data in an array to store the todo list data (in-memory)
  - Hard todo: Try to save responses in files, so that even if u exit the app and run it again, the data remains (similar to databases)

  Each todo has a title and a description. The title is a string and the description is a string.
  Each todo should also get an unique autogenerated id every time it is created
  The expected API endpoints are defined below,
  1.GET /todos - Retrieve all todo items
    Description: Returns a list of all todo items.
    Response: 200 OK with an array of todo items in JSON format.
    Example: GET http://localhost:3000/todos
    
  2.GET /todos/:id - Retrieve a specific todo item by ID
    Description: Returns a specific todo item identified by its ID.
    Response: 200 OK with the todo item in JSON format if found, or 404 Not Found if not found.
    Example: GET http://localhost:3000/todos/123
    
  3. POST /todos - Create a new todo item
    Description: Creates a new todo item.
    Request Body: JSON object representing the todo item.
    Response: 201 Created with the ID of the created todo item in JSON format. eg: {id: 1}
    Example: POST http://localhost:3000/todos
    Request Body: { "title": "Buy groceries", "completed": false, description: "I should buy groceries" }
    
  4. PUT /todos/:id - Update an existing todo item by ID
    Description: Updates an existing todo item identified by its ID.
    Request Body: JSON object representing the updated todo item.
    Response: 200 OK if the todo item was found and updated, or 404 Not Found if not found.
    Example: PUT http://localhost:3000/todos/123
    Request Body: { "title": "Buy groceries", "completed": true }
    
  5. DELETE /todos/:id - Delete a todo item by ID
    Description: Deletes a todo item identified by its ID.
    Response: 200 OK if the todo item was found and deleted, or 404 Not Found if not found.
    Example: DELETE http://localhost:3000/todos/123

    - For any other route not defined in the server return 404

  Testing the server - run `npm run test-todoServer` command in terminal
 */
const express = require("express");
const bodyParser = require("body-parser");
const { randomUUID } = require("crypto");
const fs = require("fs");

const app = express();

const PORT = 3000;

let todos = [];

app.use(bodyParser.json());

// Retrieve all todo items
app.get("/todos", (req, res) => {
  fs.readFile("./todos.json", "utf-8", (err, data) => {
    if (err) throw new Error("File not found");
    else {
      res.json(JSON.parse(data));
    }
  });
});

//Retrieve a specific todo item by ID
app.get("/todos/:id", (req, res) => {
  const todoID = req.params.id;

  fs.readFile("./todos.json", "utf-8", (err, data) => {
    if (err) throw new Error("File not found");
    else {
      let todos = JSON.parse(data);
      const todoItem = todos.find((item) => item.id == todoID);

      if (todoItem) {
        res.status(200).json(todoItem);
      } else {
        res.status(404).send("todo not found");
      }
    }
  });
});

//Create a new todo item
app.post("/todos", (req, res) => {
  let todoBody = req.body;
  const newTodo = { ...todoBody, id: randomUUID() };

  fs.readFile("./todos.json", "utf-8", (err, data) => {
    if (err) throw new Error("File not found");
    else {
      let todos = JSON.parse(data);
      todos = [...todos, newTodo];

      fs.writeFile("./todos.json", JSON.stringify(todos), (err) => {
        if (err) throw new Error("File not saved");
        else {
          res.status(201).json({ id: newTodo.id });
        }
      });
    }
  });
});

//Update an existing todo item by ID
app.put("/todos/:id", (req, res) => {
  const todoId = req.params.id;
  const todoBody = req.body;

  fs.readFile("./todos.json", "utf-8", (err, data) => {
    if (err) throw new Error("File not found");
    else {
      let todos = JSON.parse(data);
      let todoItem = todos.find((item) => item.id == todoId);

      if (todoItem) {
        todos = todos.map((item) => {
          if (item.id == todoId) {
            item = { ...item, ...todoBody };
            todoItem = item;
          }
          return item;
        });

        fs.writeFile("./todos.json", JSON.stringify(todos), (err) => {
          if (err) throw new Error("File not saved");
          else {
            res.status(200).json(todoItem);
          }
        });
      } else {
        res.status(404).send("Todo Not Found");
      }
    }
  });
});

//Delete a todo item by ID
app.delete("/todos/:id", (req, res) => {
  const todoId = req.params.id;

  fs.readFile("./todos.json", "utf-8", (err, data) => {
    if (err) throw new Error("File not found");
    else {
      let todos = JSON.parse(data);
      todoItem = todos.find((item) => item.id == todoId);

      if (todoItem) {
        const tempArr = todos.filter((item) => item.id != todoId);
        todos = [...tempArr];

        fs.writeFile("./todos.json", JSON.stringify(todos), (err) => {
          if (err) throw new Error("File not saved");
          else {
            res.status(200).send();
          }
        });
      } else {
        res.status(404).send("Todo not found");
      }
    }
  });
});

// For any other route not defined in the server return 404
app.use((req, res) => {
  res.status(404).send("Route not found");
});

// app.listen(PORT, () => console.log("Server is running on port 3000"));
module.exports = app;
