/**
  You need to create an express HTTP server in Node.js which will handle the logic of a todo list app.
  - Don't use any database, just store all the data in an array to store the todo list data (in-memory)
  - Hard todo: Try to save responses in files, so that even if u exit the app and run it again, the data remains (similar to databases)

  Each todo has a title and a description. The title is a string and the description is a string.
  Each todo should also get an unique autogenerated id every time it is created
  The expected API endpoints are defined below,
  1.GET /todos - Retrieve all todo items
    Description: Returns a list of all todo items.
    Response: 200 OK with an array of todo items in JSON format.
    Example: GET http://localhost:3000/todos
    
  2.GET /todos/:id - Retrieve a specific todo item by ID
    Description: Returns a specific todo item identified by its ID.
    Response: 200 OK with the todo item in JSON format if found, or 404 Not Found if not found.
    Example: GET http://localhost:3000/todos/123
    
  3. POST /todos - Create a new todo item
    Description: Creates a new todo item.
    Request Body: JSON object representing the todo item.
    Response: 201 Created with the ID of the created todo item in JSON format. eg: {id: 1}
    Example: POST http://localhost:3000/todos
    Request Body: { "title": "Buy groceries", "completed": false, description: "I should buy groceries" }
    
  4. PUT /todos/:id - Update an existing todo item by ID
    Description: Updates an existing todo item identified by its ID.
    Request Body: JSON object representing the updated todo item.
    Response: 200 OK if the todo item was found and updated, or 404 Not Found if not found.
    Example: PUT http://localhost:3000/todos/123
    Request Body: { "title": "Buy groceries", "completed": true }
    
  5. DELETE /todos/:id - Delete a todo item by ID
    Description: Deletes a todo item identified by its ID.
    Response: 200 OK if the todo item was found and deleted, or 404 Not Found if not found.
    Example: DELETE http://localhost:3000/todos/123

    - For any other route not defined in the server return 404

  Testing the server - run `npm run test-todoServer` command in terminal
 */
const express = require("express");
const bodyParser = require("body-parser");
// const { v4: uuidv4 } = require("uuid");
const fs = require("fs");

const app = express();

app.use(bodyParser.json());

app.get("/todos", (req, res) => {
  fs.readFile("todos.json", "utf8", (err, data) => {
    if (err) {
      res.status(400).json(err);
    } else {
      const todos = JSON.parse(data);
      res.status(200).json(todos);
    }
  });
});

app.get("/todos/:id", (req, res) => {
  const todoId = parseInt(req.params.id, 10);

  fs.readFile("todos.json", "utf8", (err, data) => {
    if (err) {
      res.status(404).json(err);
    } else {
      const todos = JSON.parse(data);
      const foundTodo = todos.find((todo) => todo.id === todoId);

      if (foundTodo) {
        res.json(foundTodo);
      } else {
        res.status(404).json({ error: "Todo not found" });
      }
    }
  });
});

app.post("/todos", (req, res) => {
  const newTodo = {
    id: Math.floor(Math.random() * 1000000), // unique random id
    title: req.body.title,
    description: req.body.description
  };
  fs.readFile("todos.json", "utf8", (err, data) => {
    if (err) throw err;
    const todos = JSON.parse(data);
    todos.push(newTodo);
    fs.writeFile("todos.json", JSON.stringify(todos), (err) => {
      if (err) throw err;
      res.status(201).json(newTodo);
    });
  });
});

app.put("/todos/:id", (req, res) => {
  fs.readFile("todos.json", "utf8", (err, data) => {
    if (err) {
      res.status(404).json(err);
    } else {
      let todos = JSON.parse(data);
      
      const todoId = parseInt(req.params.id, 10);

      const todoIndex = todos.findIndex((todo) => todo.id === todoId);

      if (todoIndex === -1) {
        return res.status(404).json({ error: "Todo not found" });
      }

      // Update the todo with the new data from the request body
      todos[todoIndex] = {
        ...todos[todoIndex],
        ...req.body, // Update with properties from request body
      };

      fs.writeFile("todos.json", JSON.stringify(todos), (err) => {
        if (err) {
          console.log(err);
          res.status(400).json(err);
        } else {
          console.log("updated successfully");
          res.status(200).json({ msg: "updated successfully" });
        }
      });
    }
  });
});




app.delete("/todos/:id", (req, res) => {
  fs.readFile("todos.json", "utf8", (err, data) => {
    if (err) {
      res.status(404).json(err);
    } else {
      let todos = JSON.parse(data);
      const todoId = parseInt(req.params.id, 10);

      const updatedTodos = todos.filter(todo => todo.id !== todoId);

      // If the length of the arrays is the same, the todo wasn't found
      if (updatedTodos.length === todos.length) {
        return res.status(404).json({ error: 'Todo not found' });
      }
    
      // Update the original array with the new array without the deleted todo
      todos = updatedTodos;

      fs.writeFile("todos.json", JSON.stringify(todos), (err) => {
        if (err) {
          console.log(err);
          res.status(400).json(err);
        } else {
          console.log("deleted successfully");
          res.status(200).json({ msg: "deleted successfully" });
        }
      });
    }
  });
});


app.use((req, res, next) => {
  res.status(404).send();
});
// app.listen(3000, () => {
//   console.log("app listening on port 3000");
// });
module.exports = app;
