/**
  You need to create an express HTTP server in Node.js which will handle the logic of a todo list app.
  - Don't use any database, just store all the data in an array to store the todo list data (in-memory)
  - Hard todo: Try to save responses in files, so that even if u exit the app and run it again, the data remains (similar to databases)

  Each todo has a title and a description. The title is a string and the description is a string.
  Each todo should also get an unique autogenerated id every time it is created
  The expected API endpoints are defined below,
  1.GET /todos - Retrieve all todo items
    Description: Returns a list of all todo items.
    Response: 200 OK with an array of todo items in JSON format.
    Example: GET http://localhost:3000/todos
    
  2.GET /todos/:id - Retrieve a specific todo item by ID
    Description: Returns a specific todo item identified by its ID.
    Response: 200 OK with the todo item in JSON format if found, or 404 Not Found if not found.
    Example: GET http://localhost:3000/todos/123
    
  3. POST /todos - Create a new todo item
    Description: Creates a new todo item.
    Request Body: JSON object representing the todo item.
    Response: 201 Created with the ID of the created todo item in JSON format. eg: {id: 1}
    Example: POST http://localhost:3000/todos
    Request Body: { "title": "Buy groceries", "completed": false, description: "I should buy groceries" }
    
  4. PUT /todos/:id - Update an existing todo item by ID
    Description: Updates an existing todo item identified by its ID.
    Request Body: JSON object representing the updated todo item.
    Response: 200 OK if the todo item was found and updated, or 404 Not Found if not found.
    Example: PUT http://localhost:3000/todos/123
    Request Body: { "title": "Buy groceries", "completed": true }
    
  5. DELETE /todos/:id - Delete a todo item by ID
    Description: Deletes a todo item identified by its ID.
    Response: 200 OK if the todo item was found and deleted, or 404 Not Found if not found.
    Example: DELETE http://localhost:3000/todos/123

    - For any other route not defined in the server return 404

  Testing the server - run `npm run test-todoServer` command in terminal
 */
const express = require('express');
const bodyParser = require('body-parser');
const fs = require('fs');
const uuid = require('uuid');

const app = express();

app.use(bodyParser.json());

// GET List of Todos
app.get("/todos", (req, res) => {
  fs.readFile("todos.json", "utf-8", (err, data) => {
    if (err) {
      if (err.code == 'ENOENT') {
        res.status(404).json({ "message": "file not found" });
      }
      else {
        res.status(500).send(err);
      }

    }
    else {
      res.status(200).json(data);
    }
  })
})

//Get specific id
app.get('/todos/:id', (req, res) => {
  const id = req.params.id;
  fs.readFile("todos.json", "utf-8", (err, data) => {
    if (err) {
      if (err.code == 'ENOENT') {
        res.status(404).json({ "message": "file not found" });
      } else {
        res.status(500).send(err);
      }
    }

    let existing_todos = JSON.parse(data);
    let find_todo = existing_todos.find(todo => todo.id === id);

    if (find_todo) {
      res.status(200).send(find_todo);
    }
    else {
      res.status(404).json({ "message": "No such id" });
    }
  })

})

// Create a new todo item
app.post('/todos', (req, res) => {
  const { title, description, completed } = req.body;

  fs.readFile("todos.json", 'utf-8', (err, data) => {
    if (err && err.code !== 'ENOENT') {
      res.status(500).send(err);
    } else {
      let todos = [];
      if (!err) {
        try {
          todos = JSON.parse(data);
        } catch (parseError) {
          res.status(500).send(parseError);
          return;
        }
      }

      const newTodo = {
        id: uuid.v4(),
        title,
        description,
        completed
      };

      todos.push(newTodo);

      fs.writeFile("todos.json", JSON.stringify(todos, null, 2), (writeErr) => {
        if (writeErr) {
          res.status(500).send(writeErr);
        } else {
          res.status(201).json({ id: newTodo.id });
        }
      });
    }
  });
});

// Update a todo by id
app.put('/todos/:id', (req, res) => {
  const id = req.params.id;
  const { title, completed } = req.body;

  fs.readFile('todos.json', 'utf-8', (err, data) => {
    if (err) {
      if (err.code == 'ENOENT') {
        res.status(404).json({ "message": "File not found" });
      } else {
        res.status(500).send(err);
      }
      return;
    }

    let existingTodos = JSON.parse(data);
    const foundIndex = existingTodos.findIndex(todo => todo.id === id);

    if (foundIndex !== -1) {
      existingTodos[foundIndex].title = title || existingTodos[foundIndex].title;
      existingTodos[foundIndex].completed = completed !== undefined ? completed : existingTodos[foundIndex].completed;

      fs.writeFile('todos.json', JSON.stringify(existingTodos, null, 2), (writeErr) => {
        if (writeErr) {
          res.status(500).send(writeErr);
        } else {
          res.status(200).json(existingTodos[foundIndex]);
        }
      });
    } else {
      res.status(404).json({ "message": "No such id" });
    }
  });
});

//Delete a todo by id
app.delete('/todos/:id', (req, res) => {
  const id = req.params.id;

  // Read the contents of the 'todos.json' file
  fs.readFile("todos.json", "utf-8", (err, data) => {
    if (err) {
      if (err.code == 'ENOENT') {
        res.status(404).json({"message": "File not found"});
      } else {
        res.status(500).send(err);
      }
      return;
    }

    // Parse the existing todos from the file
    let existingTodos = JSON.parse(data);

    // Find the index of the todo with the specified ID
    let findTodoIndex = existingTodos.findIndex(todo => todo.id === id);

    if (findTodoIndex !== -1) {
      // Remove the todo from the existing array using splice
      existingTodos.splice(findTodoIndex, 1);

      // Write the updated todos back to the 'todos.json' file
      fs.writeFile('todos.json', JSON.stringify(existingTodos, null, 2), (writeErr) => {
        if (writeErr) {
          res.status(500).send(writeErr);
        } else {
          // Respond with the updated todos after deletion
          res.status(200).json(existingTodos);
        }
      });
    } else {
      // If the todo with the specified ID is not found
      res.status(404).json({ "message": "No such id" });
    }
  });
});

// For any other route not defined in the server, return 404
app.use((req, res) => {
  res.status(404).send('Route not found');
});


app.listen(3001, console.log("Listening on port 3001"));

module.exports = app;