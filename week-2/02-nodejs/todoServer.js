/**
  You need to create an express HTTP server in Node.js which will handle the logic of a todo list app.
  - Don't use any database, just store all the data in an array to store the todo list data (in-memory)
  - Hard todo: Try to save responses in files, so that even if u exit the app and run it again, the data remains (similar to databases)

  Each todo has a title and a description. The title is a string and the description is a string.
  Each todo should also get an unique autogenerated id every time it is created
  The expected API endpoints are defined below,
  1.GET /todos - Retrieve all todo items
    Description: Returns a list of all todo items.
    Response: 200 OK with an array of todo items in JSON format.
    Example: GET http://localhost:3000/todos
    
  2.GET /todos/:id - Retrieve a specific todo item by ID
    Description: Returns a specific todo item identified by its ID.
    Response: 200 OK with the todo item in JSON format if found, or 404 Not Found if not found.
    Example: GET http://localhost:3000/todos/123
    
  3. POST /todos - Create a new todo item
    Description: Creates a new todo item.
    Request Body: JSON object representing the todo item.
    Response: 201 Created with the ID of the created todo item in JSON format. eg: {id: 1}
    Example: POST http://localhost:3000/todos
    Request Body: { "title": "Buy groceries", "completed": false, description: "I should buy groceries" }
    
  4. PUT /todos/:id - Update an existing todo item by ID
    Description: Updates an existing todo item identified by its ID.
    Request Body: JSON object representing the updated todo item.
    Response: 200 OK if the todo item was found and updated, or 404 Not Found if not found.
    Example: PUT http://localhost:3000/todos/123
    Request Body: { "title": "Buy groceries", "completed": true }
    
  5. DELETE /todos/:id - Delete a todo item by ID
    Description: Deletes a todo item identified by its ID.
    Response: 200 OK if the todo item was found and deleted, or 404 Not Found if not found.
    Example: DELETE http://localhost:3000/todos/123

    - For any other route not defined in the server return 404

  Testing the server - run `npm run test-todoServer` command in terminal
 */
const express = require("express");
const bodyParser = require("body-parser");
const app = express();
app.use(bodyParser.json());

let i = 3;
let todo = [
  {
    id: "1",
    title: "Going gym",
  },
  {
    id: "2",
    title: "Study DSA",
  },
  {
    id: "3",
    title: "Read about perivous work",
  },
];

//Reading
app.get("/todo", (req, res) => {
  res.json(todo);
});

app.get("/todo/:id", (req, res) => {
  try {
    const id = req.params.id;
    let td = todo.filter((card) => {
      return card.id === id;
    });
    res.json(td[0].title);
  } catch (error) {
    res.status(404).send("404 NOT FOUND");
  }
});

// Creating todo
app.post("/todo", (req, res) => {
  i++;
  const work = req.query.work;
  todo.push({
    id: i,
    title: work,
  });

  res.json(todo);
});

// update todo through id
app.put("/todo", (req, res) => {
  // try {
  //   const tempid = req.query.id;
  //   const work = req.query.work;

  //   todo.forEach((element) => {
  //     if (element.id === tempid) {
  //       element.todo = work;
  //       res.send("TODO is update");
  //     }
  //   });

  // } catch (error) {
  //   res.status(404).send("Todo not found");
  // }

  const tempid = req.query.id;
  const work = req.query.work;
  const todoIndex = todo.findIndex((t) => t.id === parseInt(tempid));

  if (todoIndex === -1) {
    res.status(404).send();
  } else {
    todo[todoIndex].title = work;
    res.json(todo[todoIndex]);
  }
});

// delete
app.delete("/todo/:id", (req, res) => {
  const tempid = req.params.id;
  todo.splice(
    todo.findIndex((a) => a.id === tempid),
    1
  );
  res.status(200);
});

// for all other routes, return 404
app.use((req, res, next) => {
  res.status(404).send();
});

app.listen(3000);
module.exports = app;
