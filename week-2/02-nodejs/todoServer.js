/**
  You need to create an express HTTP server in Node.js which will handle the logic of a todo list app.
  - Don't use any database, just store all the data in an array to store the todo list data (in-memory)
  - Hard todo: Try to save responses in files, so that even if u exit the app and run it again, the data remains (similar to databases)

  Each todo has a title and a description. The title is a string and the description is a string.
  Each todo should also get an unique autogenerated id every time it is created
  The expected API endpoints are defined below,
  1.GET /todos - Retrieve all todo items
    Description: Returns a list of all todo items.
    Response: 200 OK with an array of todo items in JSON format.
    Example: GET http://localhost:3000/todos
    
  2.GET /todos/:id - Retrieve a specific todo item by ID
    Description: Returns a specific todo item identified by its ID.
    Response: 200 OK with the todo item in JSON format if found, or 404 Not Found if not found.
    Example: GET http://localhost:3000/todos/123
    
  3. POST /todos - Create a new todo item
    Description: Creates a new todo item.
    Request Body: JSON object representing the todo item.
    Response: 201 Created with the ID of the created todo item in JSON format. eg: {id: 1}
    Example: POST http://localhost:3000/todos
    Request Body: { "title": "Buy groceries", "completed": false, description: "I should buy groceries" }
    
  4. PUT /todos/:id - Update an existing todo item by ID
    Description: Updates an existing todo item identified by its ID.
    Request Body: JSON object representing the updated todo item.
    Response: 200 OK if the todo item was found and updated, or 404 Not Found if not found.
    Example: PUT http://localhost:3000/todos/123
    Request Body: { "title": "Buy groceries", "completed": true }
    
  5. DELETE /todos/:id - Delete a todo item by ID
    Description: Deletes a todo item identified by its ID.
    Response: 200 OK if the todo item was found and deleted, or 404 Not Found if not found.
    Example: DELETE http://localhost:3000/todos/123

    - For any other route not defined in the server return 404

  Testing the server - run `npm run test-todoServer` command in terminal
 */

const express = require("express");
const bodyParser = require("body-parser");
const uuid = require("uuid");
const fs = require("fs");
const path = require("path");

const app = express();

app.use(bodyParser.json());

const filePath = path.join(__dirname, "todos.json");

let todos = [];

function populateTodos() {
  fs.readFile(filePath, "utf-8", (error, data) => {
    if (error) {
      console.error("Error while reading the file:", error);
      return;
    }
    let existingData = data ? JSON.parse(data) : [];
    todos = existingData;
  });
}

populateTodos();

function updateFile(newData, replaceArray = false) {
  if (replaceArray) {
    newData = JSON.stringify(newData, null, 2);
    fs.writeFile(filePath, newData, "utf8", (error) => {
      if (error) {
        console.error("Error while writing to the file:", error);
        return;
      }
      console.log("Successfully logged response to", filePath);
    });
  } else {
    fs.readFile(filePath, "utf-8", (error, data) => {
      if (error) {
        console.error("Error while reading the file:", error);
        return;
      }

      let existingData = data ? JSON.parse(data) : [];
      existingData.push(newData);
      const updatedData = JSON.stringify(existingData, null, 2);

      fs.writeFile(filePath, updatedData, "utf8", (error) => {
        if (error) {
          console.error("Error appending JSON data:", error);
          return;
        }
        console.log("Successfully logged response to", filePath);
      });
    });
  }
}

app.get("/todos", (req, res) => {
  res.status(200).json(todos);
});

app.get("/todos/:id", (req, res) => {
  let todoIndex = todos.findIndex((todo) => todo.id === req.params.id);
  if (todoIndex === -1) {
    res.status(404).send("Not Found");
    return;
  }
  res.status(200).json(todos[todoIndex]);
});

app.post("/todos", (req, res) => {
  const title = req.body.title;
  const description = req.body.description;
  if (!title || !description) {
    res.status(400).json({ error: "Invalid request data." });
    return;
  }
  let todoData = { id: uuid.v4(), title: title, description: description };
  todos.push(todoData);
  updateFile(todoData);
  res.status(201).json({ id: todoData.id });
});

app.put("/todos/:id", (req, res) => {
  let todoIndex = todos.findIndex((todo) => todo.id === req.params.id);
  if (todoIndex === -1) {
    res.status(404).send("Not Found");
    return;
  }
  const title = req.body.title;
  const description = req.body.description;
  if (!title || !description) {
    res.status(400).json({ error: "Invalid request data." });
    return;
  }
  todos[todoIndex].title = title;
  todos[todoIndex].description = description;
  updateFile(todos, true);
  res.send();
});

app.delete("/todos/:id", (req, res) => {
  let todoIndex = todos.findIndex((todo) => todo.id === req.params.id);
  if (todoIndex === -1) {
    res.status(404).send("Not Found");
    return;
  }
  todos.splice(todoIndex, 1);
  updateFile(todos, true);
  res.send();
});

app.use((req, res) => {
  res.status(404).send("Not Found");
});

app.listen(3000);
module.exports = app;
