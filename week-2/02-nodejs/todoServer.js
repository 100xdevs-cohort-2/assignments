/**
  You need to create an express HTTP server in Node.js which will handle the logic of a todo list app.
  - Don't use any database, just store all the data in an array to store the todo list data (in-memory)
  - Hard todo: Try to save responses in files, so that even if u exit the app and run it again, the data remains (similar to databases)

  Each todo has a title and a description. The title is a string and the description is a string.
  Each todo should also get an unique autogenerated id every time it is created
  The expected API endpoints are defined below,
  1.GET /todos - Retrieve all todo items
    Description: Returns a list of all todo items.
    Response: 200 OK with an array of todo items in JSON format.
    Example: GET http://localhost:3000/todos
    
  2.GET /todos/:id - Retrieve a specific todo item by ID
    Description: Returns a specific todo item identified by its ID.
    Response: 200 OK with the todo item in JSON format if found, or 404 Not Found if not found.
    Example: GET http://localhost:3000/todos/123
    
  3. POST /todos - Create a new todo item
    Description: Creates a new todo item.
    Request Body: JSON object representing the todo item.
    Response: 201 Created with the ID of the created todo item in JSON format. eg: {id: 1}
    Example: POST http://localhost:3000/todos
    Request Body: { "title": "Buy groceries", "completed": false, description: "I should buy groceries" }
    
  4. PUT /todos/:id - Update an existing todo item by ID
    Description: Updates an existing todo item identified by its ID.
    Request Body: JSON object representing the updated todo item.
    Response: 200 OK if the todo item was found and updated, or 404 Not Found if not found.
    Example: PUT http://localhost:3000/todos/123
    Request Body: { "title": "Buy groceries", "completed": true }
    
  5. DELETE /todos/:id - Delete a todo item by ID
    Description: Deletes a todo item identified by its ID.
    Response: 200 OK if the todo item was found and deleted, or 404 Not Found if not found.
    Example: DELETE http://localhost:3000/todos/123

    - For any other route not defined in the server return 404

  Testing the server - run `npm run test-todoServer` command in terminal
 */

// TODO[Hard todo]: Try to save responses in files, so that even if u exit the app and run it again, the data remains (similar to databases)

const express = require('express');
const bodyParser = require('body-parser');

const app = express();

//middlewares
app.use(express.json());

const todos = [];

app.get('/', (_, response) => {
  response.send('Hello from ToodServer');
});

app.get('/todos', (_, response) => {
  response.json(todos);
});

app.get('/todos/:id', (request, response) => {
  const createdTodoId = request.params.id;
  const todo = todos.find((todo) => todo.id === createdTodoId);
  console.log({ createdTodoId, todo });
  if (!todo) return response.status(404).end();
  response.json(todo);
});

// TODO: Use strong uiid or unique id creation method
app.post('/todos', (request, response) => {
  const payload = request.body;
  console.log({ todo: payload });
  const todo = { ...payload, id: `${Math.random()}` };
  todos.push(todo);
  response.status(201).json(todo);
});

// INFO: let's use mutation
app.put('/todos/:id', (request, response) => {
  const toBeUpdatedTodoId = request.params.id;
  const index = todos.findIndex((todo) => todo.id === toBeUpdatedTodoId);
  if (index < 0) return response.status(404).end();
  const todo = todos.find((todo) => todo.id === toBeUpdatedTodoId);
  const payload = request.body;
  const updatedTodo = { ...todo, ...payload };
  todos.splice(index, 1, updatedTodo);
  return response.json(updatedTodo);
});

// INFO: let's use mutation
app.delete('/todos/:id', (request, response) => {
  const toBeDeletedodoId = request.params.id;
  const index = todos.findIndex((todo) => todo.id === toBeDeletedodoId);
  if (index < 0) return response.status(404).end();
  todos.splice(index, 1);
  return response.status(200).end();
});

app.use(bodyParser.json());

module.exports = app;
