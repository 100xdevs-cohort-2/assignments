/**
  You need to create an express HTTP server in Node.js which will handle the logic of a todo list app.
  - Don't use any database, just store all the data in an array to store the todo list data (in-memory)
  - Hard todo: Try to save responses in files, so that even if u exit the app and run it again, the data remains (similar to databases)

  Each todo has a title and a description. The title is a string and the description is a string.
  Each todo should also get an unique autogenerated id every time it is created
  The expected API endpoints are defined below,
  1.GET /todos - Retrieve all todo items
    Description: Returns a list of all todo items.
    Response: 200 OK with an array of todo items in JSON format.
    Example: GET http://localhost:3000/todos
    
  2.GET /todos/:id - Retrieve a specific todo item by ID
    Description: Returns a specific todo item identified by its ID.
    Response: 200 OK with the todo item in JSON format if found, or 404 Not Found if not found.
    Example: GET http://localhost:3000/todos/123
    
  3. POST /todos - Create a new todo item
    Description: Creates a new todo item.
    Request Body: JSON object representing the todo item.
    Response: 201 Created with the ID of the created todo item in JSON format. eg: {id: 1}
    Example: POST http://localhost:3000/todos
    Request Body: { "title": "Buy groceries", "completed": false, description: "I should buy groceries" }
    
  4. PUT /todos/:id - Update an existing todo item by ID
    Description: Updates an existing todo item identified by its ID.
    Request Body: JSON object representing the updated todo item.
    Response: 200 OK if the todo item was found and updated, or 404 Not Found if not found.
    Example: PUT http://localhost:3000/todos/123
    Request Body: { "title": "Buy groceries", "completed": true }
    
  5. DELETE /todos/:id - Delete a todo item by ID
    Description: Deletes a todo item identified by its ID.
    Response: 200 OK if the todo item was found and deleted, or 404 Not Found if not found.
    Example: DELETE http://localhost:3000/todos/123

    - For any other route not defined in the server return 404

  Testing the server - run ` command in terminal
 */
const express = require('express');
const bodyParser = require('body-parser');
const uuid = require('uuid');

const app = express();

app.use(bodyParser.json());

let todos = [];

// choose the port number to be 3000 otherwise whatever provided in the environment of the PORT 
const PORT = 3000 | process.env.PORT;


app.get("/todos", (request, response) => {
  // console.log("got the request on this particular route to get the list of todos present in the current array \n");
  const responseData = JSON.stringify(todos);

  response.status(200).send(responseData);
});



app.post("/todos", (request, response) => {
  // console.log("the new id is \n", uuid.v4())
  const newId = uuid.v4();
  const newTodo = {
    id : newId,
    title : request.body.title, 
    description : request.body.description
  };

  // we have to append this to the end of the todos app for this purpose 
  todos.push(newTodo);

  console.log(todos);

  // we have to return the final response to the client for this purpose 
  response.status(201).send({id : newTodo.id});
})

app.get("/todos/:id", (request, response) => {
  const currentTodoId = request.params.id;
  console.log("the value of the id of the todo to be searched \n", currentTodoId);

  let data = {};
  // using the for loop to find the value of the todo 
  todos.forEach(currTodo => {
    if(currTodo.id === currentTodoId)
    {
      data = currTodo;
    }
  });

  if(data == {})
  {
    response.status(404).send({});
  }

  console.log("the data that i got is after searching is as follows \n", data);
  // we have to return the data that we haeve got 
  response.status(200).send(data);
  // now we have to find the given todo 
  // using the for loop for this purpose 

})


// creating the server in express for this purpose 
app.listen(3000, () => {
  console.log(`Listening the server on port number ${PORT}`);
})


  
module.exports = app;