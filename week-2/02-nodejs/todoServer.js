/**
  You need to create an express HTTP server in Node.js which will handle the logic of a todo list app.
  - Don't use any database, just store all the data in an array to store the todo list data (in-memory)
  - Hard todo: Try to save responses in files, so that even if u exit the app and run it again, the data remains (similar to databases)

  Each todo has a title and a description. The title is a string and the description is a string.
  Each todo should also get an unique autogenerated id every time it is created
  The expected API endpoints are defined below,
  1.GET /todos - Retrieve all todo items
    Description: Returns a list of all todo items.
    Response: 200 OK with an array of todo items in JSON format.
    Example: GET http://localhost:3000/todos
    
  2.GET /todos/:id - Retrieve a specific todo item by ID
    Description: Returns a specific todo item identified by its ID.
    Response: 200 OK with the todo item in JSON format if found, or 404 Not Found if not found.
    Example: GET http://localhost:3000/todos/123
    
  3. POST /todos - Create a new todo item
    Description: Creates a new todo item.
    Request Body: JSON object representing the todo item.
    Response: 201 Created with the ID of the created todo item in JSON format. eg: {id: 1}
    Example: POST http://localhost:3000/todos
    Request Body: { "title": "Buy groceries", "completed": false, description: "I should buy groceries" }
    
  4. PUT /todos/:id - Update an existing todo item by ID
    Description: Updates an existing todo item identified by its ID.
    Request Body: JSON object representing the updated todo item.
    Response: 200 OK if the todo item was found and updated, or 404 Not Found if not found.
    Example: PUT http://localhost:3000/todos/123
    Request Body: { "title": "Buy groceries", "completed": true }
    
  5. DELETE /todos/:id - Delete a todo item by ID
    Description: Deletes a todo item identified by its ID.
    Response: 200 OK if the todo item was found and deleted, or 404 Not Found if not found.
    Example: DELETE http://localhost:3000/todos/123

    - For any other route not defined in the server return 404

  Testing the server - run `npm run test-todoServer` command in terminal
 */
/*
  -to provide solution for problem we an use the file hnadling in the javasrcipt by using the filestream library in js.
  fs library.
*/
  const express = require('express');
  const bodyParser = require('body-parser');
  const fs = require('fs');
  const { escape } = require('querystring');
  const app = express();


  app.use(bodyParser.json());

  //define the findIndex function which will return the unique id of the todo list and the particular
  // todo list don't exit then return the .
  function findIndex(arr,id)
  {
    for(let i=0;i<arr.length;i++)
    {
      if(id==arr[i].id)
      {
        return i;
      }
    }
    return --i;
  }

  //defind the removeAtindex function which help in delete method to delete the part todo item.
  function removeAtIndex(arr, index) {
    let newArray = [];
    for (let i = 0; i < arr.length; i++) {
      if (i !== index) newArray.push(arr[i]);
    }
    return newArray;
  }
  //defining the 1 get funtion which route on the path /todos.
  app.get("/todos",function(req,res){
    fs.readFile("todos.json","utf-8",(err,data)=>{
      if(err) throw err;
      else{
        res.json(JSON.parse(data));
      }
    });
  });
  //defining the get which route on the 
  app.get("/todos:id",(req,res)=>{
    fs.readFile("todos.json","utf-8",(err,data)=>{
      if(err) throw err;
      else{
        const todolist=JSON.parse(data);
        const index = findIndex(todolist,parseInt(req.params.id));
        if(index=-1)
        {
          res.status(404).send();
        }
        else{
          res.json(JSON.parse(toodolist[i]));
        }
      }
    });
  });

  //defind the put method for the serve which will route over the todos:id by id
  app.put("todos:id",(req,res)=>{
    fs.readFile("files.json","utf-8",(err,data)=>{
      if(err) throw err;
      else{
        let todolist = JSON.parse(data);
        let ind = findIndex(todolist,req.params.id);
        if(ind==-1)
        {
          req.status(404).send();
        }
        else{
          todolist[ind].id =  req.params.id;
          todolist[ind].title = req.body.title;
          todolist[ind].description = req.body.discription;
          fs.writeFile("todos.json", JSON.stringify(todos), (err) => {
            if (err) throw err;
            res.status(200).json(updatedTodo);
          });
        }
        
      }
    });
  });
    //defining the post method which route to the todos;
    app.post("/todos",(req,res)=>{
      fs.readFile("todos.json","utf-8",(err,data)=>{
        if(err) throw err;
        else{
          const newTodo = {
            id: Math.floor(Math.random() * 1000000), // unique random id
            title: req.body.title,
            description: req.body.description
          };
          fs.readFile("todos.json", "utf8", (err, data) => {
            if (err) throw err;
            const todos = JSON.parse(data);
            todos.push(newTodo);
            fs.writeFile("todos.json", JSON.stringify(todos), (err) => {
              if (err) throw err;
              res.status(201).json(newTodo);
            });
          });
        }
      });
    });
    //defing the delete function.
    app.delete('/todos/:id', function(req, res) {

      fs.readFile("todos.json", "utf8", (err, data) => {
        if (err) throw err;
        let todos = JSON.parse(data);
        removeAtIndex(todos,req.params.id);
        fs.writeFile("todos.json", JSON.stringify(todos), (err) => {
          if (err) throw err;
          res.status(200).json(updatedTodo);
        });
      });
    });
  
    // for all other routes, return 404
    app.use((req, res, next) => {
      res.status(404).send();
    });
    let port=3000;
    app.listen(port);
    console.log(`${port}`);
  module.exports = app;