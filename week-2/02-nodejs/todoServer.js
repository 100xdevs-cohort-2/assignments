/**
  You need to create an express HTTP server in Node.js which will handle the logic of a todo list app.
  - Don't use any database, just store all the data in an array to store the todo list data (in-memory)
  - Hard todo: Try to save responses in files, so that even if u exit the app and run it again, the data remains (similar to databases)

  Each todo has a title and a description. The title is a string and the description is a string.
  Each todo should also get an unique autogenerated id every time it is created
  The expected API endpoints are defined below,
  1.GET /todos - Retrieve all todo items
    Description: Returns a list of all todo items.
    Response: 200 OK with an array of todo items in JSON format.
    Example: GET http://localhost:3000/todos
    
  2.GET /todos/:id - Retrieve a specific todo item by ID
    Description: Returns a specific todo item identified by its ID.
    Response: 200 OK with the todo item in JSON format if found, or 404 Not Found if not found.
    Example: GET http://localhost:3000/todos/123
    
  3. POST /todos - Create a new todo item
    Description: Creates a new todo item.
    Request Body: JSON object representing the todo item.
    Response: 201 Created with the ID of the created todo item in JSON format. eg: {id: 1}
    Example: POST http://localhost:3000/todos
    Request Body: { "title": "Buy groceries", "completed": false, description: "I should buy groceries" }
    
  4. PUT /todos/:id - Update an existing todo item by ID
    Description: Updates an existing todo item identified by its ID.
    Request Body: JSON object representing the updated todo item.
    Response: 200 OK if the todo item was found and updated, or 404 Not Found if not found.
    Example: PUT http://localhost:3000/todos/123
    Request Body: { "title": "Buy groceries", "completed": true }
    
  5. DELETE /todos/:id - Delete a todo item by ID
    Description: Deletes a todo item identified by its ID.
    Response: 200 OK if the todo item was found and deleted, or 404 Not Found if not found.
    Example: DELETE http://localhost:3000/todos/123

    - For any other route not defined in the server return 404

  Testing the server - run `npm run test-todoServer` command in terminal
 */
const express = require('express');
const bodyParser = require('body-parser');
const fs = require('fs');
const app = express();

// app.use(bodyParser.urlencoded({ extended: true }));
app.use(bodyParser.json());

app.get('/todos', (req, res) => {
  fs.readFile("todos.json", "utf-8", (err, data) => {
    if (err) throw err;
    res.json(JSON.parse(data))
  })
})

app.get('/todos/:id', (req, res) => {
  fs.readFile("todos.json", "utf-8", (err, data) => {
    if (err) throw err
    const todos = JSON.parse(data)
    const todoItem = todos.find(item => item.id === parseInt(req.params.id))
    if (!todoItem) {
      res.status(404).json()
    }
    res.json(todoItem)
  })
})
app.post('/todos', (req, res) => {
  const { title, description } = req.body
  if (!title || title === "") {
    return res.status(404).json({ Error: "Text Field is Empty" })
  } else {
    const todoItem = {
      id: Math.floor(Math.random() * 10000),
      title: title,
      description: description,
    }
    fs.readFile("todos.json", "utf-8", (err, data) => {
      if (err) throw err
      const todos = JSON.parse(data)
      todos.push(todoItem)
      fs.writeFile("todos.json", JSON.stringify(todos), err => {
        if (err) throw err;
        res.status(201).json(todoItem)
      })
    })
  }
})

app.patch('/todos/:id', (req, res) => {
  fs.readFile("todos.json", "utf-8", (err, data) => {
    if (err) throw err
    const todos = JSON.parse(data)
    const todoItem = todos.find(item => item.id === parseInt(req.params.id))
    if (!todoItem) return res.status(404).json()
    if (req.body.description) {
      todoItem.description = req.body.description
    }
    if (req.body.title != undefined && req.body.title != "") {
      todoItem.title = req.body.title
    }
    fs.writeFile("todos.json", JSON.stringify(todos), err => {
      if (err) throw err;
      res.status(201).json(todoItem)
    })
  })
})

app.put("/todos/:id", (req, res) => {
  const { title, description } = req.body
  fs.readFile("todos.json", "utf-8", (err, data) => {
    if (err) throw err
    const todos = JSON.parse(data)
    const itemIndex = todos.findIndex(todo => todo.id === parseInt(req.params.id))
    if (itemIndex === -1) {
      res.status(404).json()
    } else {
      const updatedItem = {
        id: todos[itemIndex].id,
        title,
        description
      }
      todos[itemIndex] = updatedItem
      fs.writeFile("todos.json", JSON.stringify(todos), (err) => {
        if (err) throw err
        res.status(200).json(updatedItem)
      })
    }
  })
})

app.delete('/todos/:id', (req, res) => {
  fs.readFile("todos.json", "utf-8", (err, data) => {
    if (err) throw err
    const todos = JSON.parse(data)
    const itemIndex = todos.findIndex(item => item.id === parseInt(req.params.id))
    if (itemIndex < 0 && itemIndex >= todos.length) {
      res.status(400).json()
    }
    todos.splice(itemIndex, 1)
    fs.writeFile("todos.json", JSON.stringify(todos), (err) => {
      if (err) throw err
      res.json(todos)
    })
  })
})
// app.listen(3000)

module.exports = app;