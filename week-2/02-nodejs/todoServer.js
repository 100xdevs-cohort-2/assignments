/**
  You need to create an express HTTP server in Node.js which will handle the logic of a todo list app.
  - Don't use any database, just store all the data in an array to store the todo list data (in-memory)
  - Hard todo: Try to save responses in files, so that even if u exit the app and run it again, the data remains (similar to databases)

  Each todo has a title and a description. The title is a string and the description is a string.
  Each todo should also get an unique autogenerated id every time it is created
  The expected API endpoints are defined below,
  1.GET /todos - Retrieve all todo items
    Description: Returns a list of all todo items.
    Response: 200 OK with an array of todo items in JSON format.
    Example: GET http://localhost:3000/todos
    
  2.GET /todos/:id - Retrieve a specific todo item by ID
    Description: Returns a specific todo item identified by its ID.
    Response: 200 OK with the todo item in JSON format if found, or 404 Not Found if not found.
    Example: GET http://localhost:3000/todos/123
    
  3. POST /todos - Create a new todo item
    Description: Creates a new todo item.
    Request Body: JSON object representing the todo item.
    Response: 201 Created with the ID of the created todo item in JSON format. eg: {id: 1}
    Example: POST http://localhost:3000/todos
    Request Body: { "title": "Buy groceries", "completed": false, description: "I should buy groceries" }
    
  4. PUT /todos/:id - Update an existing todo item by ID
    Description: Updates an existing todo item identified by its ID.
    Request Body: JSON object representing the updated todo item.
    Response: 200 OK if the todo item was found and updated, or 404 Not Found if not found.
    Example: PUT http://localhost:3000/todos/123
    Request Body: { "title": "Buy groceries", "completed": true }
    
  5. DELETE /todos/:id - Delete a todo item by ID
    Description: Deletes a todo item identified by its ID.
    Response: 200 OK if the todo item was found and deleted, or 404 Not Found if not found.
    Example: DELETE http://localhost:3000/todos/123

    - For any other route not defined in the server return 404

  Testing the server - run `npm run test-todoServer` command in terminal
 */
const express = require('express');
const fs = require("fs")
const bodyParser = require('body-parser');

const app = express();

app.use(bodyParser.json());

//route for getting all todos
app.get("/todos", async (req, res) => {
  try {
    const fileContent = fs.readFileSync("todo.txt", 'utf8');
    const todo = fileContent.split('\n')
    res.status(200).json(todo);
  }
  catch (err) {
    res.status(404).send("Server Error");
  }
})

//route for getting only specific id
app.get("/todos/:id", (req, res) => {
  try {
    const fileContent = fs.readFileSync("todo.txt", 'utf8');
    const todo = fileContent.split('\n');
    if (req.params.id - 1 >= 0 && req.params.id - 1 < todo.length) {
      res.status(200).send(todo[req.params.id - 1]);
    }
    else {
      res.status(404).send("Not Found");
    }

  }
  catch (err) {
    res.status(404).send("Not Found");
  }
})

//route to post todo to the server
app.post("/todos", (req, res) => {
  try {
    const data = JSON.stringify(req.body);
    const fileContent = fs.readFileSync("todo.txt", 'utf8');
    const todo = fileContent.split('\n').filter(line => line.trim());
    todo.push(data);
    const id = todo.length
    console.log(todo);
    fs.writeFileSync("todo.txt", "");
    for (let i = 0; i < todo.length; i++) {
      const d = todo[i];
      fs.appendFileSync("todo.txt", d);
      fs.appendFileSync("todo.txt", '\n');
    }
    res.status(201).send({ id: id })
  } catch (err) {
    console.error('Error appending to file:', err);
    res.status(404).send("Error Posting Data")
  }

})

app.put("/todos/:id", (req, res) => {
  try {
    const data = JSON.stringify(req.body);
    const fileContent = fs.readFileSync("todo.txt", 'utf8');
    const todo = fileContent.split('\n');
    if (req.params.id - 1 >= 0 && req.params.id - 1 < todo.length) {
      todo[req.params.id - 1] = data;
    }
    else {
      res.status(404).send("Not Found");
    }
    fs.writeFileSync("todo.txt", "");
    for (let i = 0; i < todo.length; i++) {
      const d = todo[i];
      fs.appendFileSync("todo.txt", d);
      fs.appendFileSync("todo.txt", '\n');
    }
    res.status(200).send("data updated successfully");
  }
  catch {
    console.error('Error Updatig todo:', err);
    res.status(404).send("Not Found");
  }
})


app.delete("/todos/:id", (req, res) => {
  try {
    const fileContent = fs.readFileSync("todo.txt", 'utf8');
    const todo = fileContent.split('\n');
    indexToRemove = req.params.id - 1;
    if (indexToRemove >= 0 && indexToRemove < todo.length) {
      todo.splice(indexToRemove, 1);
    }
    else {
      res.status(404).send("Not Found");
    }
    fs.writeFileSync("todo.txt", "");
    fs.appendFileSync("todo.txt", "");
    console.log("todo-len", todo.length);
    console.log("todo-len", todo);
    for (let i = 0; i < todo.length; i++) {
      const d = todo[i];
      console.log(d)
      fs.appendFileSync("todo.txt", d);
      fs.appendFileSync("todo.txt", '\n');
    }
    res.status(200).send("data deleted successfully");
  }
  catch {
    console.error('Error deleting todo:', err);
    res.status(404).send("Not Found");
  }
})


app.listen("3001", () => {
  console.log("Server is listening at port 3001")
})
module.exports = app;