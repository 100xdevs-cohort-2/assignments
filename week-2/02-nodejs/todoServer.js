/**
  You need to create an express HTTP server in Node.js which will handle the logic of a todo list app.
  - Don't use any database, just store all the data in an array to store the todo list data (in-memory)
  - Hard todo: Try to save responses in files, so that even if u exit the app and run it again, the data remains (similar to databases)

  Each todo has a title and a description. The title is a string and the description is a string.
  Each todo should also get an unique autogenerated id every time it is created
  The expected API endpoints are defined below,
  1.GET /todos - Retrieve all todo items
    Description: Returns a list of all todo items.
    Response: 200 OK with an array of todo items in JSON format.
    Example: GET http://localhost:3000/todos
    
  2.GET /todos/:id - Retrieve a specific todo item by ID
    Description: Returns a specific todo item identified by its ID.
    Response: 200 OK with the todo item in JSON format if found, or 404 Not Found if not found.
    Example: GET http://localhost:3000/todos/123
    
  3. POST /todos - Create a new todo item
    Description: Creates a new todo item.
    Request Body: JSON object representing the todo item.
    Response: 201 Created with the ID of the created todo item in JSON format. eg: {id: 1}
    Example: POST http://localhost:3000/todos
    Request Body: { "title": "Buy groceries", "completed": false, description: "I should buy groceries" }
    
  4. PUT /todos/:id - Update an existing todo item by ID
    Description: Updates an existing todo item identified by its ID.
    Request Body: JSON object representing the updated todo item.
    Response: 200 OK if the todo item was found and updated, or 404 Not Found if not found.
    Example: PUT http://localhost:3000/todos/123
    Request Body: { "title": "Buy groceries", "completed": true }
    
  5. DELETE /todos/:id - Delete a todo item by ID
    Description: Deletes a todo item identified by its ID.
    Response: 200 OK if the todo item was found and deleted, or 404 Not Found if not found.
    Example: DELETE http://localhost:3000/todos/123

    - For any other route not defined in the server return 404

  Testing the server - run `npm run test-todoServer` command in terminal
 */
const express = require('express');
const fs = require('fs');
const app = express();
const fileName = "./todos.json";

app.use(express.json());

function readTodoFromFile() {
  return new Promise(function (resolve) {
    fs.readFile(fileName, 'utf-8', function(err, data){
      if (err) {
        console.log(err);
      } else {
        resolve(JSON.parse(data));
      }
    })
  })
}

function writeTodoToFile() {
  return new Promise(function (resolve) {
    fs.writeFile(fileName, JSON.stringify(todos), 'utf-8', function(err, data){
      if (err) {
        console.log(err);
      } else {
        resolve();
      }
    })
  })
}


var todos = []
readTodoFromFile().then(function (value) {
  if (value != null) {
    todos = value;
  }
  // console.log("todos =" + JSON.stringify(todos));
  // console.log("todos =" + typeof(todos));
})


// 1. Get /todos - Retrieve all todo items
app.get("/todos", function (req, res) {
  res.status(200).json(todos);
})
 
// 2.GET /todos/:id - Retrieve a specific todo item by ID
app.get("/todos/:id", function (req, res) {
  // console.log("user requested id="+req.params.id);
  let todoArray = todos.filter(function(todo) {
    if (todo.id == req.params.id) {
      return true;
    } else {
      return false;
    }
  })

  if (todoArray.length == 0) {
    res.sendStatus(404)
  } else {
    // console.log("Found todo= " + todo);
    res.status(200).json(todoArray[0]);
  }
})

// 3. POST /todos - Create a new todo item
app.post("/todos", function (req, res) {
  const todo = {
    id : Date.now().toString(), // timestamp as Id
    title : req.body.title,
    completed : false,
    description : req.body.description
  }
  todos.push(todo);
  res.status(201).json({id : todo.id});
  writeTodoToFile().then(function(data){
    // console.log("POST: File saved.")
  })
})

// 4. PUT /todos/:id - Update an existing todo item by ID
app.put("/todos/:id", function (req, res) {
  let todoFound = false;
  for (let i=0; i<todos.length; i++) {
    // console.log("id="+todos[i].id + ", params="+req.params.id);
    if (todos[i].id == req.params.id) {
      // Iterate over body object and update Todo
      for (let key of Object.keys(req.body)) {
        todos[i][key] = req.body[key]
      }
      todoFound = true;
    }
  }
  if (todoFound == false) {
    res.sendStatus(404);
  } else {
    res.sendStatus(200);
    writeTodoToFile().then(function(data){
      // console.log("PUT: File saved.")
    })
  }
})

// 5. DELETE /todos/:id - Delete a todo item by ID
app.delete("/todos/:id", function(req, res) {
  let todoFound = false;
  todos = todos.filter(function (todo) {
    if (todo.id == req.params.id) {
      todoFound = true;
      return false;
    } else {
      return true;
    }
  })
  if (todoFound == false) {
    res.sendStatus(404);
  } else {
    res.sendStatus(200);
    writeTodoToFile().then(function(data){
      // console.log("DELETE: File saved.")
    })
  }
})

// - For any other route not defined in the server return 404
app.get("*", function(req, res) {
  res.sendStatus(404);
})

// app.listen(4000, function(){ console.log("Started listening at 4000")})
module.exports = app;