/**
  You need to create an express HTTP server in Node.js which will handle the logic of a todo list app.
  - Don't use any database, just store all the data in an array to store the todo list data (in-memory)
  - Hard todo: Try to save responses in files, so that even if u exit the app and run it again, the data remains (similar to databases)

  Each todo has a title and a description. The title is a string and the description is a string.
  Each todo should also get an unique autogenerated id every time it is created
  The expected API endpoints are defined below,
  1.GET /todos - Retrieve all todo items
    Description: Returns a list of all todo items.
    Response: 200 OK with an array of todo items in JSON format.
    Example: GET http://localhost:3000/todos
    
  2.GET /todos/:id - Retrieve a specific todo item by ID
    Description: Returns a specific todo item identified by its ID.
    Response: 200 OK with the todo item in JSON format if found, or 404 Not Found if not found.
    Example: GET http://localhost:3000/todos/123
    
  3. POST /todos - Create a new todo item
    Description: Creates a new todo item.
    Request Body: JSON object representing the todo item.
    Response: 201 Created with the ID of the created todo item in JSON format. eg: {id: 1}
    Example: POST http://localhost:3000/todos
    Request Body: { "title": "Buy groceries", "completed": false, description: "I should buy groceries" }
    
  4. PUT /todos/:id - Update an existing todo item by ID
    Description: Updates an existing todo item identified by its ID.
    Request Body: JSON object representing the updated todo item.
    Response: 200 OK if the todo item was found and updated, or 404 Not Found if not found.
    Example: PUT http://localhost:3000/todos/123
    Request Body: { "title": "Buy groceries", "completed": true }
    
  5. DELETE /todos/:id - Delete a todo item by ID
    Description: Deletes a todo item identified by its ID.
    Response: 200 OK if the todo item was found and deleted, or 404 Not Found if not found.
    Example: DELETE http://localhost:3000/todos/123

    - For any other route not defined in the server return 404

  Testing the server - run `npm run test-todoServer` command in terminal
 */

  const express = require('express');
  const bodyParser = require('body-parser');
const { error } = require('console');
  const fs=require('fs').promises;
  const PORT=3000;
  
  const app = express();
  app.use(bodyParser.json());
  const FILE='./todos.json'
  let idGen=1;

  app.get('/todos',async (req,res)=>{
    try{
      const todos= JSON.parse(await fs.readFile(FILE,'utf-8'));
      return res.status(200).json(todos);
    }
    catch(e){
      
      return res.status(400).json({"message":e.message});
    }
  })

  app.get('/todos/:id',async (req,res)=>{
    try{
      const id=req.params.id;
      const todos= JSON.parse(await fs.readFile(FILE,'utf-8'));
      if(isNaN(id)) return res.status(404).json({"message":"invalid id"})
      const todo=todos.filter((ele)=>ele.id==id);
      return res.status(200).json(todo[0]);
    }
    catch(e){
      return res.status(400).json({"message":e.message});
    }
  })

  app.post('/todos',async (req,res)=>{
    try{
      const todos= JSON.parse(await fs.readFile(FILE,'utf-8'));
      const todo=req.body;
      todos.push({...todo,"id":idGen});
      await fs.writeFile(FILE,JSON.stringify(todos))
      return res.status(201).json({"id":idGen++});
    }
    catch(e){
      // console.log(e)
      return res.status(400).json({"message":e.message});
    }
  })

  app.put('/todos/:id',async (req,res)=>{
    try{
      const id=req.params.id;
      const todos= JSON.parse(await fs.readFile(FILE,'utf-8'));
      if(isNaN(id) ) return res.status(404).json({"message":"invalid id"})
      const newTodos=todos.filter((ele)=>ele.id!=id);
      if(todos.length == newTodos.length ) return res.status(404).json({"message":"invalid id"})
      const todo=req.body;
      newTodos.push({...todo,"id":id});
      await fs.writeFile(FILE,JSON.stringify(newTodos))
      
      return res.status(200).json({"status":"updated"});
    }
    catch(e){
      return res.status(400).json({"message":e.message});
    }
  })

  app.delete('/todos/:id',async (req,res)=>{
    try{
      const id=req.params.id;
      let todos= JSON.parse(await fs.readFile(FILE,'utf-8'));
      if(isNaN(id) ) return res.status(404).json({"message":"invalid id"})
      const deletedTodos=todos.filter((ele)=>ele.id!=id);
      if(todos.length==deletedTodos.lenght) return res.status(404).json({"message":"invalid id"})
      await fs.writeFile(FILE,JSON.stringify(deletedTodos))
      
      return res.status(200).json({"status":"updated"});
    }
    catch(e){
      return res.status(400).json({"message":e.message});
    }
  })
  
  module.exports = app;