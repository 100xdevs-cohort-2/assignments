/**
  You need to create an express HTTP server in Node.js which will handle the logic of a todo list app.
  - Don't use any database, just store all the data in an array to store the todo list data (in-memory)
  - Hard todo: Try to save responses in files, so that even if u exit the app and run it again, the data remains (similar to databases)

  Each todo has a title and a description. The title is a string and the description is a string.
  Each todo should also get an unique autogenerated id every time it is created
  The expected API endpoints are defined below,
  1.GET /todos - Retrieve all todo items
    Description: Returns a list of all todo items.
    Response: 200 OK with an array of todo items in JSON format.
    Example: GET http://localhost:3000/todos
    
  2.GET /todos/:id - Retrieve a specific todo item by ID
    Description: Returns a specific todo item identified by its ID.
    Response: 200 OK with the todo item in JSON format if found, or 404 Not Found if not found.
    Example: GET http://localhost:3000/todos/123
    
  3. POST /todos - Create a new todo item
    Description: Creates a new todo item.
    Request Body: JSON object representing the todo item.
    Response: 201 Created with the ID of the created todo item in JSON format. eg: {id: 1}
    Example: POST http://localhost:3000/todos
    Request Body: { "title": "Buy groceries", "completed": false, description: "I should buy groceries" }
    
  4. PUT /todos/:id - Update an existing todo item by ID
    Description: Updates an existing todo item identified by its ID.
    Request Body: JSON object representing the updated todo item.
    Response: 200 OK if the todo item was found and updated, or 404 Not Found if not found.
    Example: PUT http://localhost:3000/todos/123
    Request Body: { "title": "Buy groceries", "completed": true }
    
  5. DELETE /todos/:id - Delete a todo item by ID
    Description: Deletes a todo item identified by its ID.
    Response: 200 OK if the todo item was found and deleted, or 404 Not Found if not found.
    Example: DELETE http://localhost:3000/todos/123

    - For any other route not defined in the server return 404

  Testing the server - run `npm run test-todoServer` command in terminal
 */
const express = require("express");
const bodyParser = require("body-parser");
const fs = require("fs");
const { v4: uuidv4 } = require("uuid");

const app = express();

app.use(bodyParser.json());

const readTodosFromFile = (callback) => {
  fs.readFile("todos.json", "utf-8", (err, data) => {
    if (err) {
      console.log(err.message);
      callback(err, null);
    } else {
      callback(null, JSON.parse(data));
    }
  });
};

const writeTodosToFile = (todos, callback) => {
  fs.writeFile("todos.json", JSON.stringify(todos), "utf-8", (err) => {
    if (err) {
      console.log(err.message);
      callback(err);
    } else {
      callback(null);
    }
  });
};

app.get("/todos", (req, res) => {
  readTodosFromFile((err, todo_items) => {
    if (err) {
      res.status(500).json({ error: "Error in reading file" });
    } else {
      res.json(todo_items);
    }
  });
});

app.get("/todos/:id", (req, res) => {
  readTodosFromFile((err, todo_items) => {
    if (err) {
      res.status(500).json({ error: "Error in reading file" });
    } else {
      const todo = todo_items.find((t) => t.id == req.params.id);
      if (todo) {
        res.json(todo);
      } else {
        res.status(404).json({ error: "Todo item not found" });
      }
    }
  });
});

app.post("/todos", (req, res) => {
  readTodosFromFile((readErr, todo_items) => {
    if (readErr) {
      res.status(500).json({ error: "Error in reading file" });
    } else {
      const todo = req.body;
      todo.id = uuidv4();
      todo_items.push(todo);
      writeTodosToFile(todo_items, (writeErr) => {
        if (writeErr) {
          res.status(500).json({ error: "Error in saving data" });
        } else {
          res.status(201).json(todo);
        }
      });
    }
  });
});

app.put("/todos/:id", (req, res) => {
  readTodosFromFile((readErr, todo_items) => {
    if (readErr) {
      res.status(500).json({ error: "Error in reading file" });
    } else {
      const id = req.params.id;
      const todo = req.body;
      let item = todo_items.find((t) => t.id == id);
      if (!item) {
        return res.status(404).json({ error: "Todo item not found" });
      }
      if (todo.title) item.title = todo.title;
      if (todo.completed !== undefined) item.completed = todo.completed;
      if (todo.description) item.description = todo.description;
      writeTodosToFile(todo_items, (writeErr) => {
        if (writeErr) {
          res.status(500).json({ error: "Error in saving data" });
        } else {
          res.json({ message: "Todo updated successfully!" });
        }
      });
    }
  });
});

app.delete("/todos/:id", (req, res) => {
  readTodosFromFile((readErr, todo_items) => {
    if (readErr) {
      res.status(500).json({ error: "Error in reading file" });
    } else {
      const id = req.params.id;
      let itemIndex = todo_items.findIndex((t) => t.id == id);
      if (itemIndex === -1) {
        return res.status(404).json({ error: "Todo item not found" });
      }
      todo_items.splice(itemIndex, 1);
      writeTodosToFile(todo_items, (writeErr) => {
        if (writeErr) {
          res.status(500).json({ error: "Error in saving data" });
        } else {
          res.json({ message: "Todo deleted successfully!" });
        }
      });
    }
  });
});

app.all("*", (req, res) => {
  res.status(404).send("Route not found");
});

// app.listen(3000);

module.exports = app;
