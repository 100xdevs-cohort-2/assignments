/**
  You need to create an express HTTP server in Node.js which will handle the logic of a todo list app.
  - Don't use any database, just store all the data in an array to store the todo list data (in-memory)
  - Hard todo: Try to save responses in files, so that even if u exit the app and run it again, the data remains (similar to databases)

  Each todo has a title and a description. The title is a string and the description is a string.
  Each todo should also get an unique autogenerated id every time it is created
  The expected API endpoints are defined below,
  1.GET /todos - Retrieve all todo items
    Description: Returns a list of all todo items.
    Response: 200 OK with an array of todo items in JSON format.
    Example: GET http://localhost:3000/todos
    
  2.GET /todos/:id - Retrieve a specific todo item by ID
    Description: Returns a specific todo item identified by its ID.
    Response: 200 OK with the todo item in JSON format if found, or 404 Not Found if not found.
    Example: GET http://localhost:3000/todos/123
    
  3. POST /todos - Create a new todo item
    Description: Creates a new todo item.
    Request Body: JSON object representing the todo item.
    Response: 201 Created with the ID of the created todo item in JSON format. eg: {id: 1}
    Example: POST http://localhost:3000/todos
    Request Body: { "title": "Buy groceries", "completed": false, description: "I should buy groceries" }
    
  4. PUT /todos/:id - Update an existing todo item by ID
    Description: Updates an existing todo item identified by its ID.
    Request Body: JSON object representing the updated todo item.
    Response: 200 OK if the todo item was found and updated, or 404 Not Found if not found.
    Example: PUT http://localhost:3000/todos/123
    Request Body: { "title": "Buy groceries", "completed": true }
    
  5. DELETE /todos/:id - Delete a todo item by ID
    Description: Deletes a todo item identified by its ID.
    Response: 200 OK if the todo item was found and deleted, or 404 Not Found if not found.
    Example: DELETE http://localhost:3000/todos/123

    - For any other route not defined in the server return 404

  Testing the server - run `npm run test-todoServer` command in terminal
 */

const express = require('express');
const bodyParser = require('body-parser');
const fs = require('fs');

const app = express();
app.use(bodyParser.json());

// [Store Todos] ----------------------------------------------------------

// Functions
const filePath = './todos.json';

function loadData(params) {
  try {
    const data = fs.readFileSync(filePath);
    todos = JSON.parse(data);
  } catch (error) {
    console.log('Error reading todos file: ', error);
  }
}

function saveDataInFile(params) {
  fs.writeFile(filePath, JSON.stringify(todos, null, 2), (err) => {
    if (err) {
      console.log('Error reading todos file: ', err);
    }
  })
}

// Storing variables
let todos = [];
let noteId = 100;

loadData();

// -------------------------------------------------------------------------

function getAllTodos() {
  return todos;
}

function getTodoById(id) {
  return todos.find((val) => val.id === id);
}

function deleteTodoById(id) {
  todos = todos.filter((val) => val.id !== id);
}

function isTodoPresent(id) {
  return todos.some((val) => val.id === id);
}

function generateId() {
  return noteId++;
}

// -------------------------------------------------------------------------


// 1.GET /todos - Retrieve all todo items
app.get('/todos', (req, res) => {
  res.status(200).json(getAllTodos());
});

// 2.GET /todos/:id - Retrieve a specific todo item by ID
app.get('/todos/:id', (req, res) => {
  const id = parseInt(req.params.id);

  const todo = getTodoById(id);

  if (todo) {
    res.status(200).json(todo);
  } else {
    res.status(404).json({ error: "Todo not found."});
  }
});

// 3. POST /todos - Create a new todo item
app.post('/todos', (req, res) => {
  const newTodo = {
    "id": generateId(),
    "title": req.body.title,
    "completed": req.body.completed,
    "description": req.body.description
  };

  todos.push(newTodo);

  saveDataInFile();

  res.status(201).json({ id: newTodo.id });
});

// 4. PUT /todos/:id - Update an existing todo item by ID
app.put('/todos/:id', (req, res) => {
  const id = parseInt(req.params.id);

  const todo = getTodoById(id);

  if (todo) {
    if (req.body.title) todo.title = req.body.title;
    if (req.body.completed !== undefined) todo.completed = req.body.completed;
    if (req.body.description) todo.description = req.body.description;

    saveDataInFile();

    res.status(200).json(todo);
  } else {
    res.status(404).json({ error: "Note with this id is not present"})
  }
});

// DELETE /todos/:id - Delete a todo item by ID
app.delete('/todos/:id', (req, res) => {
  const id = parseInt(req.params.id);

  if (isTodoPresent(id)) {
    deleteTodoById(id);
    saveDataInFile();
    res.status(200).json({ msg: "Note has been deleted"});
  } else {
    res.status(404).send({ error: "Note with this id is not present"});
  }
});

app.listen(3000);

module.exports = app;