/**
  You need to create an express HTTP server in Node.js which will handle the logic of a todo list app.
  - Don't use any database, just store all the data in an array to store the todo list data (in-memory)
  - Hard todo: Try to save responses in files, so that even if u exit the app and run it again, the data remains (similar to databases)

  Each todo has a title and a description. The title is a string and the description is a string.
  Each todo should also get an unique autogenerated id every time it is created
  The expected API endpoints are defined below,
  1.GET /todos - Retrieve all todo items
    Description: Returns a list of all todo items.
    Response: 200 OK with an array of todo items in JSON format.
    Example: GET http://localhost:3000/todos
    
  2.GET /todos/:id - Retrieve a specific todo item by ID
    Description: Returns a specific todo item identified by its ID.
    Response: 200 OK with the todo item in JSON format if found, or 404 Not Found if not found.
    Example: GET http://localhost:3000/todos/123
    
  3. POST /todos - Create a new todo item
    Description: Creates a new todo item.
    Request Body: JSON object representing the todo item.
    Response: 201 Created with the ID of the created todo item in JSON format. eg: {id: 1}
    Example: POST http://localhost:3000/todos
    Request Body: { "title": "Buy groceries", "completed": false, description: "I should buy groceries" }
    
  4. PUT /todos/:id - Update an existing todo item by ID
    Description: Updates an existing todo item identified by its ID.
    Request Body: JSON object representing the updated todo item.
    Response: 200 OK if the todo item was found and updated, or 404 Not Found if not found.
    Example: PUT http://localhost:3000/todos/123
    Request Body: { "title": "Buy groceries", "completed": true }
    
  5. DELETE /todos/:id - Delete a todo item by ID
    Description: Deletes a todo item identified by its ID.
    Response: 200 OK if the todo item was found and deleted, or 404 Not Found if not found.
    Example: DELETE http://localhost:3000/todos/123

    - For any other route not defined in the server return 404

  Testing the server - run `npm run test-todoServer` command in terminal
 */
  const express = require('express');
  const bodyParser = require('body-parser');
  const fs = require('fs');
  const { v4: uuidv4 } = require('uuid');
  const app = express();
  
  app.use(bodyParser.json());
  

  // const todo = {
  //   title: '',
  //  id: uuidv4(),
  //   completed: false,
  //   description: '',
  // };
  
  let file = 'todos.json';
  app.locals.todos = [];
  app.locals.todos = JSON.parse(fs.readFileSync(file, 'utf8', (err, data) => {
    if(err) throw err;
    return data;
  }));
  // console.log("todos initialized");

  app.get('/todos', (req, res) => {
    // console.log(app.locals.todos)
    res.status(200).send(app.locals.todos);
  });

  app.get('/todos/:ID', (req, res) => {
    const ID = req.params.ID;
    let todoFound = false;
    app.locals.todos.forEach(todo => {
      if(todo.id === ID){
        todoFound = true;
        res.status(200).send(todo);
      }
    });
    if(!todoFound)
    res.status(404).send("Not Found");
  });

  app.post('/todos', (req, res) => {
    const  ID = uuidv4();
    const todo = {...req.body, id: ID};
    app.locals.todos.push(todo);
    // update file synchronously
    fs.writeFileSync(file, JSON.stringify(app.locals.todos));
    // send response
    res.status(201).send({id: ID});
  });

  app.put('/todos/:ID', (req, res) => {
    const ID = req.params.ID;
    let todoFound = false;
    app.locals.todos.forEach((todo, index) => {
      if(todo.id === ID){
        todoFound = true;
        const newTodo = {...todo, ...req.body};
        app.locals.todos[index] = newTodo;
        res.status(200).send("OK");
      }
    });
    if(!todoFound)
    res.status(404).send("Not Found");
  });

  app.delete('/todos/:ID', (req, res) => {
    const ID = req.params.ID;
    let todoFound = false;
    app.locals.todos.forEach((todo, index) => {
      if(todo.id === ID){
        todoFound = true;
        app.locals.todos.splice(index, 1);
        res.status(200).send("OK");
      }
    });
    if(!todoFound)
    res.status(404).send("Not Found");
  });

  app.use((req, res) => {
    res.status(404).send("Not Found");
  });

  // app.listen(3000, () => {
  //   console.log('Listening on port 3000');
  // });

  
  module.exports = app;