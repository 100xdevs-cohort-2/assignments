/**
  You need to create an express HTTP server in Node.js which will handle the logic of a todo list app.
  - Don't use any database, just store all the data in an array to store the todo list data (in-memory)
  - Hard todo: Try to save responses in files, so that even if u exit the app and run it again, the data remains (similar to databases)

  Each todo has a title and a description. The title is a string and the description is a string.
  Each todo should also get an unique autogenerated id every time it is created
  The expected API endpoints are defined below,
  1.GET /todos - Retrieve all todo items
    Description: Returns a list of all todo items.
    Response: 200 OK with an array of todo items in JSON format.
    Example: GET http://localhost:3000/todos
    
  2.GET /todos/:id - Retrieve a specific todo item by ID
    Description: Returns a specific todo item identified by its ID.
    Response: 200 OK with the todo item in JSON format if found, or 404 Not Found if not found.
    Example: GET http://localhost:3000/todos/123
    
  3. POST /todos - Create a new todo item
    Description: Creates a new todo item.
    Request Body: JSON object representing the todo item.
    Response: 201 Created with the ID of the created todo item in JSON format. eg: {id: 1}
    Example: POST http://localhost:3000/todos
    Request Body: { "title": "Buy groceries", "completed": false, description: "I should buy groceries" }
    
  4. PUT /todos/:id - Update an existing todo item by ID
    Description: Updates an existing todo item identified by its ID.
    Request Body: JSON object representing the updated todo item.
    Response: 200 OK if the todo item was found and updated, or 404 Not Found if not found.
    Example: PUT http://localhost:3000/todos/123
    Request Body: { "title": "Buy groceries", "completed": true }
    
  5. DELETE /todos/:id - Delete a todo item by ID
    Description: Deletes a todo item identified by its ID.
    Response: 200 OK if the todo item was found and deleted, or 404 Not Found if not found.
    Example: DELETE http://localhost:3000/todos/123

    - For any other route not defined in the server return 404

  Testing the server - run `npm run test-todoServer` command in terminal
 */
  const express = require('express');
  const bodyParser = require('body-parser');
  const fs = require('fs').promises
  const app = express();
  app.use(bodyParser.json());


  app.get('/todos', async (req,res) => {
    const jsonFile = await fs.readFile('todos.json')
    const data = JSON.parse(jsonFile)
    res.status(200).send(data)
  })

  app.get('/todos/:id', async( req,res) => {
    try{
    const jsonFile = await fs.readFile('todos.json')
    const todos = JSON.parse(jsonFile)
    const particularTodo = todos.filter ( todo => req.params.id == todo.id );
    res.status(200).send(particularTodo)
    }
    catch (err){
      console.log("Error Occured")
      res.status(500).send("Error ocured in getting particular todo")

    }
  })


  

  app.post('/todos',async (req,res) => {
    try {
    const jsonFile  = await fs.readFile('todos.json');
    const todos = await JSON.parse(jsonFile);
    
    const {title, description} = req.body
    
    const newTodo = {
      id: todos.length + 1 ,
      title : title,
      description: description
    }

    todos.push(newTodo)

    await fs.writeFile('todos.json', JSON.stringify(todos))
    res.status(201).json({id : newTodo.id })
  }

  catch(err) {
    console.log("Error Occured in Post", err);
    res.status(500).send("Internal Server Error")
  }
    
  } )

  app.put('/todos/:id', async( req,res ) =>{

    try{
    
      const { id, title,description, completed} = req.body

      const jsonFile = await fs.readFile('todos.json');

      let todos = JSON.parse(jsonFile)

      // const particularTodo = todos.filter( todo => req.params.id == todo.id);

      const updatedTodo = {
        id:req.params.id,
        title: title,
        description : description,
        completed : completed
      }

      todos[req.params.id - 1] = updatedTodo;

      await fs.writeFile('todos.json', JSON.stringify(todos));

      res.status(200).json(updatedTodo)
    }
    catch(err){
      if(err){
        console.log("Error occured in the put option", err)
        res.status(500).send("Internal Server Error")
      }

    }


  })

  app.delete('/todos/:id',async (req,res) => {
    try{ 
      const jsonFile  = await fs.readFile('todos.json');
      const todos = JSON.parse(jsonFile);

      const todoToDelete = todos.find(todo => todo.id === parseInt(req.params.id));
      
      if(!todoToDelete ){
        res.status(404).send("Id Not found")
      }
      
      else{
        const filteredTodo = todos.filter( todo => req.params.id != todo.id )

        await fs.writeFile('todos.json', JSON.stringify(filteredTodo))

        res.status(200).json("Deleted")
      }
    }
    catch(err){
      if(err){
        console.log("Error in Deleting",err)
        res.status(404).send("Route Not Found")
      }
    }

  })
  
  
  app.use((req, res, next) => {
    res.status(404).send();
  }); 


  app.listen(3000)
  
  module.exports = app;