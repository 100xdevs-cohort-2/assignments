/**
  You need to create an express HTTP server in Node.js which will handle the logic of a todo list app.
  - Don't use any database, just store all the data in an array to store the todo list data (in-memory) ✅
  - Hard todo: Try to save responses in files, so that even if u exit the app and run it again, the data remains (similar to databases) ✅

  Each todo has a title and a description. The title is a string and the description is a string.
  Each todo should also get an unique autogenerated id every time it is created
  The expected API endpoints are defined below,
  1.GET /todos - Retrieve all todo items ✅
    Description: Returns a list of all todo items.
    Response: 200 OK with an array of todo items in JSON format.
    Example: GET http://localhost:3000/todos
    
  2.GET /todos/:id - Retrieve a specific todo item by ID ✅
    Description: Returns a specific todo item identified by its ID.
    Response: 200 OK with the todo item in JSON format if found, or 404 Not Found if not found.
    Example: GET http://localhost:3000/todos/123
    
  3. POST /todos - Create a new todo item ✅
    Description: Creates a new todo item.
    Request Body: JSON object representing the todo item.
    Response: 201 Created with the ID of the created todo item in JSON format. eg: {id: 1}
    Example: POST http://localhost:3000/todos
    Request Body: { "title": "Buy groceries", "completed": false, description: "I should buy groceries" }
    
  4. PUT /todos/:id - Update an existing todo item by ID ✅
    Description: Updates an existing todo item identified by its ID.
    Request Body: JSON object representing the updated todo item.
    Response: 200 OK if the todo item was found and updated, or 404 Not Found if not found.
    Example: PUT http://localhost:3000/todos/123
    Request Body: { "title": "Buy groceries", "completed": true }
    
  5. DELETE /todos/:id - Delete a todo item by ID ✅
    Description: Deletes a todo item identified by its ID.
    Response: 200 OK if the todo item was found and deleted, or 404 Not Found if not found.
    Example: DELETE http://localhost:3000/todos/123

    - For any other route not defined in the server return 404

  Testing the server - run `npm run test-todoServer` command in terminal
 */
const express = require("express");
const bodyParser = require("body-parser");
const fs = require("fs");

const app = express();

app.use(bodyParser.json());

//CREATE AN ITEM
app.post("/todos", function (req, res) {
  const { title, description } = req.body;
  const id = Date.now();
  const addItem = {
    title: title,
    description: description,
    completed: false,
    id: id,
  };

  fs.readFile("todos.json", "utf-8", (err, data) => {
    if (err) {
      return res.json({ error: "Error reading file." });
    }

    const todos = JSON.parse(data);
    todos.push(addItem);

    fs.writeFile("todos.json", JSON.stringify(todos), (err) => {
      if (err) {
        return res.status(500).json({ error: "Cannot write to the file!" });
      }
      res.status(201).json(addItem);
    });
  });
});

//GET ALL ITEMS IN ARRAY
app.get("/todos", function (req, res) {
  fs.readFile("todos.json", "utf-8", (err, data) => {
    if (err) {
      res.json({ error: "Error reading file." });
    } else {
      const todos = JSON.parse(data);
      res.status(200).json(todos);
    }
  });
});

//GET ITEM BY ID
app.get("/todos/:id", function (req, res) {
  const itemId = req.params.id;

  fs.readFile("todos.json", "utf-8", (err, data) => {
    if (err) {
      return res.json({ error: "Error reading file" });
    }

    const todo = JSON.parse(data);
    const item = todo.find((i) => String(i.id) === itemId);

    if (!item) {
      return res.status(404).json({ msg: "Todo Item not found" });
    } else {
      return res.status(200).json(item);
    }
  });
});

//UPDATE AN ITEM BY ID
app.put("/todos/:id", function (req, res) {
  const itemId = req.params.id;
  const updatedTodo = req.body;

  fs.readFile("todos.json", "utf-8", (error, data) => {
    if (error) {
      return res.json({ error: "Error reading from file" });
    } else {
      const todos = JSON.parse(data);
      const foundItem = todos.find((item) => String(item.id) === itemId);

      if (foundItem) {
        // Update the properties of foundItem
        foundItem.title = updatedTodo.title;
        foundItem.description = updatedTodo.description;

        fs.writeFile("todos.json", JSON.stringify(todos), (err) => {
          if (err) {
            res.json({ error: "Error writing to file!" });
          }
          return res.status(200).json(foundItem);
        });
      } else {
        return res.status(404).send(`Todo with ID ${itemId} not found.`);
      }
    }
  });
});

//DELETE A SINGLE ITEM FROM THE LIST
app.delete("/todos/:id", async function (req, res) {
  try {
    const itemId = req.params.id;

    const data = await fs.promises.readFile("todos.json", "utf-8");
    let todos = JSON.parse(data);

    const indexToRemove = todos.findIndex((item) => String(item.id) === itemId);

    if (indexToRemove !== -1) {
      todos.splice(indexToRemove, 1);

      await fs.promises.writeFile("todos.json", JSON.stringify(todos), "utf-8");
      res.status(200).json({ message: "Todo item deleted successfully!" });
    } else {
      res.status(404).send("Item does not exist");
    }
  } catch (error) {
    console.error("Error:", error);
    res.status(500).json({ error: "Internal Server Error" });
  }
});

app.use(function (err, req, res, next) {
  console.error(err.stack);
  res.status(500).send("Something went wrong!");
});

// app.listen(3000, console.log(`Server started on port 3000.`));

// app.put('/todos/:id', function(req, res){
//   const updateItem = req.query.id;
//   let updatedItems = todos.map((item)=>{

// })

module.exports = app;
