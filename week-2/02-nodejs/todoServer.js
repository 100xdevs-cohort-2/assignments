/**
  You need to create an express HTTP server in Node.js which will handle the logic of a todo list app.
  - Don't use any database, just store all the data in an array to store the todo list data (in-memory)
  - Hard todo: Try to save responses in files, so that even if u exit the app and run it again, the data remains (similar to databases)

  Each todo has a title and a description. The title is a string and the description is a string.
  Each todo should also get an unique autogenerated id every time it is created
  The expected API endpoints are defined below,
  1.GET /todos - Retrieve all todo items
    Description: Returns a list of all todo items.
    Response: 200 OK with an array of todo items in JSON format.
    Example: GET http://localhost:3000/todos
    
  2.GET /todos/:id - Retrieve a specific todo item by ID
    Description: Returns a specific todo item identified by its ID.
    Response: 200 OK with the todo item in JSON format if found, or 404 Not Found if not found.
    Example: GET http://localhost:3000/todos/123
    
  3. POST /todos - Create a new todo item
    Description: Creates a new todo item.
    Request Body: JSON object representing the todo item.
    Response: 201 Created with the ID of the created todo item in JSON format. eg: {id: 1}
    Example: POST http://localhost:3000/todos
    Request Body: { "title": "Buy groceries", "completed": false, description: "I should buy groceries" }
    
  4. PUT /todos/:id - Update an existing todo item by ID
    Description: Updates an existing todo item identified by its ID.
    Request Body: JSON object representing the updated todo item.
    Response: 200 OK if the todo item was found and updated, or 404 Not Found if not found.
    Example: PUT http://localhost:3000/todos/123
    Request Body: { "title": "Buy groceries", "completed": true }
    
  5. DELETE /todos/:id - Delete a todo item by ID
    Description: Deletes a todo item identified by its ID.
    Response: 200 OK if the todo item was found and deleted, or 404 Not Found if not found.
    Example: DELETE http://localhost:3000/todos/123

    - For any other route not defined in the server return 404

  Testing the server - run `npm run test-todoServer` command in terminal
 */
const express = require("express");
const bodyParser = require("body-parser");
const path = require("path");
const fs = require("fs");

const app = express();

app.use(bodyParser.json());

let id = 1;

app.get("/todos", function (req, res) {
  let folder = path.join(__dirname, "./todos.json");
  fs.readFile(folder, "utf8", function (err, data) {
    if (err)
      return res.status(500).json({
        error: "Invalid Input",
      });
    data = JSON.parse(data);
    return res.status(200).json(data);
  });
});

app.get("/todos/:id", function (req, res) {
  let folder = path.join(__dirname, "./todos.json");
  let data1 = [];
  fs.readFile(folder, "utf8", function (err, data) {
    if (err)
      return res.status(500).json({
        error: "Invalid Input",
      });

    data1 = JSON.parse(data);
    data1.forEach((element) => {
      if (element.id == req.params.id)
        return res.status(200).json({ element });
    });

    return res.status(500).json({ error: "element not found" });
  });
});

app.post("/todos", function (req, res) {
  let file = path.join(__dirname, "./todos.json");
  let todo = {
    id: id,
    title: req.body.title,
    completed: req.body.completed,
    description: req.body.description,
  };

  let dataHere = [];
  fs.readFile(file, function (err, data) {
    dataHere = data;
    dataHere = JSON.parse(dataHere);
    dataHere.push(todo);
    dataHere = JSON.stringify(dataHere);
    fs.writeFile(file, dataHere, (error) => {
      if (error) {
        console.log("An error has occurred ", error);
        return;
      }
      res.status(201).json({ id: todo.id });
    });
    id++;
  });
});

app.put("/todos/:id", function (req, res) {
  let folder = path.join(__dirname, "./todos.json");
  let data1 = [];
  fs.readFile(folder, "utf8", function (err, data) {
    if (err)
      return res.status(500).json({
        error: "Invalid Input",
      });
    data1 = JSON.parse(data);
    data1.forEach((element) => {
      if (element.id == req.params.id) {
        element.title = req.body.title;
        element.completed = req.body.completed;
        element.description = req.body.description;
      }
    });
    fs.writeFile(folder, JSON.stringify(data1), (error) => {
      if (error) {
        console.log("An error has occurred ", error);
        return;
      }
      res.status(200).send("Item was found and updated");
    });
  });
});

app.delete("/todos/:id", function (req, res) {
  let folder = path.join(__dirname, "./todos.json");
  let data1 = [];
  fs.readFile(folder, "utf8", function (err, data) {
    if (err)
      return res.status(500).json({
        error: "Invalid Input",
      });
    data1 = JSON.parse(data);
      console.log(data1);
    // data1.forEach((element) => {
    //   if (element.id == req.params.id) {
    //     console.log(element.id);
    //     console.log(req.params.id);
    //   }
    // })
    for (let i = 0; i < data1.length; i++) {
      if (data1[i].id == req.params.id){ 
        data1.splice(i, 1)};
    }
    fs.writeFile(folder, JSON.stringify(data1), (error) => {
      if (error) {
        console.log("An error has occurred ", error);
        return;
      }
      res.status(200).send("Item was found and updated");
    });
  });
});

app.all("*", (req, res) => {
  res.status(404).send("Route not found");
});

app.listen(3000);

module.exports = app;
