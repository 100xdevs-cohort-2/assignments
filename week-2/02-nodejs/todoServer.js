/**
  You need to create an express HTTP server in Node.js which will handle the logic of a todo list app.
  - Don't use any database, just store all the data in an array to store the todo list data (in-memory)
  - Hard todo: Try to save responses in files, so that even if u exit the app and run it again, the data remains (similar to databases)

  Each todo has a title and a description. The title is a string and the description is a string.
  
  Each todo should also get an unique autogenerated id every time it is created
  The expected API endpoints are defined below,
  1.GET /todos - Retrieve all todo items
    Description: Returns a list of all todo items.
    Response: 200 OK with an array of todo items in JSON format.
    Example: GET http://localhost:3000/todos
    
  2.GET /todos/:id - Retrieve a specific todo item by ID
    Description: Returns a specific todo item identified by its ID.
    Response: 200 OK with the todo item in JSON format if found, or 404 Not Found if not found.
    Example: GET http://localhost:3000/todos/123
    
  3. POST /todos - Create a new todo item
    Description: Creates a new todo item.
    Request Body: JSON object representing the todo item.
    Response: 201 Created with the ID of the created todo item in JSON format. eg: {id: 1}
    Example: POST http://localhost:3000/todos
    Request Body: { "title": "Buy groceries", "completed": false, description: "I should buy groceries" }
    
  4. PUT /todos/:id - Update an existing todo item by ID
    Description: Updates an existing todo item identified by its ID.
    Request Body: JSON object representing the updated todo item.
    Response: 200 OK if the todo item was found and updated, or 404 Not Found if not found.
    Example: PUT http://localhost:3000/todos/123
    Request Body: { "title": "Buy groceries", "completed": true }
    
  5. DELETE /todos/:id - Delete a todo item by ID
    Description: Deletes a todo item identified by its ID.
    Response: 200 OK if the todo item was found and deleted, or 404 Not Found if not found.
    Example: DELETE http://localhost:3000/todos/123

    - For any other route not defined in the server return 404

  Testing the server - run `npm run test-todoServer` command in terminal
 */

// {id:uuid,title:"", description:""}
const express = require("express");
const bodyParser = require("body-parser");
const fs = require("fs");
const path = require("path");
const { error } = require("console");
const PORT = 3000;
const FILEPATH = path.join(__dirname, "./todos.json");

const app = express();

app.use(bodyParser.json());

async function getTodos() {
  const response = await fetch("http://localhost:3000/todos");
  const todos = await response.json();
  return todos;
}

app.get("/todos", (req, res, next) => {
  fs.readFile(FILEPATH, "utf-8", function (err, data) {
    if (!err) {
      res.status(200).send(JSON.parse(data));
    }
  });
});

app.get("/todos/:id", async (req, res, next) => {
  try {
    const todos = await getTodos();
    const selectedTodo = todos.filter((val) => val.id == req.params.id)[0];
    if (selectedTodo != undefined) {
      res.status(200).send(selectedTodo);
    } else {
      res.status(404).send("Not Found");
    }
    console.log(selectedTodo);
  } catch {
    res.status(404).send("Not Found");
  }
});

app.put("/todos/:id", async (req, res, next) => {
  try {
    const todos = await getTodos();
    const selectedTodo = todos.filter((val) => val.id == req.params.id)[0];
    if (req.body.hasOwnProperty("title")) {
      selectedTodo["title"] = req.body["title"];
    }
    if (req.body.hasOwnProperty("description")) {
      selectedTodo["description"] = req.body["description"];
    }
    fs.writeFile(FILEPATH, JSON.stringify(todos), function (err) {
      if (!err) {
        res.status(200).send("edited");
      }
    });
  } catch {
    res.status(404).send("Not Found");
  }
});

app.post("/todos", async (req, res, nxt) => {
  const todos = await getTodos();
  let lastId = todos[todos.length - 1]["id"];
  let postData = req.body;
  postData["id"] = parseInt(lastId) + 1;
  fs.writeFile(FILEPATH, JSON.stringify([...todos, postData]), function (err) {
    if (!err) {
      res.status(201).send({ id: postData.id });
    } else {
      res.status(500).send("object not created");
    }
  });
});

app.delete("/todos/:id", async (req, res, next) => {
  try {
    const todos = await getTodos();
    const leftTodo = todos.filter((val) => val.id != req.params.id);
    fs.writeFile(FILEPATH, JSON.stringify(leftTodo), function (err) {
      if (!err) {
        res.status(200).send("Todo Entry deleted");
      } else {
        res.status(500).send("Error in deleting Todo Entry");
      }
    });
  } catch {
    res.status(404).send("Not Found");
  }
});

app.listen(PORT);
module.exports = app;
