/**
  You need to create an express HTTP server in Node.js which will handle the logic of a todo list app.
  - Don't use any database, just store all the data in an array to store the todo list data (in-memory)
  - Hard todo: Try to save responses in files, so that even if u exit the app and run it again, the data remains (similar to databases)

  Each todo has a title and a description. The title is a string and the description is a string.
  Each todo should also get an unique autogenerated id every time it is created
  The expected API endpoints are defined below,
  1.GET /todos - Retrieve all todo items
    Description: Returns a list of all todo items.
    Response: 200 OK with an array of todo items in JSON format.
    Example: GET http://localhost:3000/todos
    
  2.GET /todos/:id - Retrieve a specific todo item by ID
    Description: Returns a specific todo item identified by its ID.
    Response: 200 OK with the todo item in JSON format if found, or 404 Not Found if not found.
    Example: GET http://localhost:3000/todos/123
    
  3. POST /todos - Create a new todo item
    Description: Creates a new todo item.
    Request Body: JSON object representing the todo item.
    Response: 201 Created with the ID of the created todo item in JSON format. eg: {id: 1}
    Example: POST http://localhost:3000/todos
    Request Body: { "title": "Buy groceries", "completed": false, description: "I should buy groceries" }
    
  4. PUT /todos/:id - Update an existing todo item by ID
    Description: Updates an existing todo item identified by its ID.
    Request Body: JSON object representing the updated todo item.
    Response: 200 OK if the todo item was found and updated, or 404 Not Found if not found.
    Example: PUT http://localhost:3000/todos/123
    Request Body: { "title": "Buy groceries", "completed": true }
    
  5. DELETE /todos/:id - Delete a todo item by ID
    Description: Deletes a todo item identified by its ID.
    Response: 200 OK if the todo item was found and deleted, or 404 Not Found if not found.
    Example: DELETE http://localhost:3000/todos/123

    - For any other route not defined in the server return 404

  Testing the server - run `npm run test-todoServer` command in terminal
 */
  const express = require('express');
  const path = require('path');
  const fs = require('fs');
  const bodyParser = require('body-parser');
  const port = 3000;
  const app = express();
  const filesDir = path.join(__dirname, "todos.json");
 
  // This line enables Express to parse incoming JSON data from request bodies.
  app.use(bodyParser.json());



const loadTodoData = () => {
      const data = fs.readFileSync(filesDir, 'utf-8')
      return data ? JSON.parse(data) : [];
}  

let todoData = loadTodoData();

const findId = () => {
  const id = todoData.map(item => item.id);
  let newId = 1;
  while(id.includes(newId))
  {
    newId++;
  }
  return newId;
}

// Function to save todo data to file
function saveTodo(data) {
  fs.writeFileSync(filesDir, JSON.stringify(data, null, 2), "utf8");
}







  app.get("/todos", (req,res) => {
     res.status(200).json(todoData)
  })

  app.get("/todos/:id", (req,res) => {
    const todoId = parseInt(req.params.id, 10);
    let todoEl;
    for (const item of todoData) {
       if(item.id === todoId)
       {
           todoEl = item;
           break;
       }
    }
    if(todoEl)
    {
      res.status(200).json(todoEl)
    }
    else
    {
      res.status(404).send("Not found");
    }
 })


 

 app.post('/todos', (req, res) => {
  let newTodo = req.body;
  newTodo.id = findId();
  todoData.push(newTodo);
  saveTodo(todoData);
  res.status(200).json({id : newTodo.id})
 })





 app.put('/todos/:id', (req,res) => {
  const todoId = parseInt(req.params.id, 10);
  let updatedTodo = req.body;
  let todoIndex = todoData.findIndex(item => item.id === todoId);

   // If the todo item is found
   if (todoIndex !== -1) {
    // Update the todo item
    todoData[todoIndex] = { ...todoData[todoIndex], ...updatedTodo };
    res.status(200).json({ message: 'Todo item updated successfully' });
  } else {
    // Todo item not found, return 404 Not Found
    res.status(404).json({ message: 'Todo item not found' });
  }
 })

 app.delete('/todos/:id', (req, res) => {
  const todoId = parseInt(req.params.id, 10);
  let todoIndex = todoData.findIndex(item => item.id === todoId);

  if(todoIndex !== -1)
  {
    todoData.splice(todoIndex, 1);
    saveTodo(todoData);
    res.status(200).send("Ok");
  }
  else
  {
    res.status(404).send("Not Found")
  }

 })

 app.use((req, res) => {
  res.status(404).send("Not found");
})
  


  app.listen(port, () => {
    console.log(`Example app listening on port ${port}`)
  })
  
  
  module.exports = app;