/**
  You need to create an express HTTP server in Node.js which will handle the logic of a todo list app.
  - Don't use any database, just store all the data in an array to store the todo list data (in-memory)
  - Hard todo: Try to save responses in files, so that even if u exit the app and run it again, the data remains (similar to databases)

  Each todo has a title and a description. The title is a string and the description is a string.
  Each todo should also get an unique autogenerated id every time it is created
  The expected API endpoints are defined below,
  1.GET /todos - Retrieve all todo items
    Description: Returns a list of all todo items.
    Response: 200 OK with an array of todo items in JSON format.
    Example: GET http://localhost:3000/todos
    
  2.GET /todos/:id - Retrieve a specific todo item by ID
    Description: Returns a specific todo item identified by its ID.
    Response: 200 OK with the todo item in JSON format if found, or 404 Not Found if not found.
    Example: GET http://localhost:3000/todos/123
    
  3. POST /todos - Create a new todo item
    Description: Creates a new todo item.
    Request Body: JSON object representing the todo item.
    Response: 201 Created with the ID of the created todo item in JSON format. eg: {id: 1}
    Example: POST http://localhost:3000/todos
    Request Body: { "title": "Buy groceries", "completed": false, description: "I should buy groceries" }
    
  4. PUT /todos/:id - Update an existing todo item by ID
    Description: Updates an existing todo item identified by its ID.
    Request Body: JSON object representing the updated todo item.
    Response: 200 OK if the todo item was found and updated, or 404 Not Found if not found.
    Example: PUT http://localhost:3000/todos/123
    Request Body: { "title": "Buy groceries", "completed": true }
    
  5. DELETE /todos/:id - Delete a todo item by ID
    Description: Deletes a todo item identified by its ID.
    Response: 200 OK if the todo item was found and deleted, or 404 Not Found if not found.
    Example: DELETE http://localhost:3000/todos/123

    - For any other route not defined in the server return 404

  Testing the server - run `npm run test-todoServer` command in terminal
 */

// // ############ TOTO TEMPLATE ###############
// {
//   title: "Todo title",
//   desription: "Todo description"
// }

const express = require("express");
const bodyParser = require("body-parser");
const fs = require("fs");

const app = express();

app.use(bodyParser.json());

const id = () => Math.random().toString().substring(2, 12);
const addTodo = (todo) => {
  const uid = id();
  todos.push({ id: uid, ...todo });
  return uid;
};

async function getTodosFromFile() {
  try {
    const fileContent = await fs.promises.readFile(
      __dirname + "/myTodos.json",
      "utf-8"
    );
    return JSON.parse(fileContent);
  } catch (err) {
    console.log("error in reading from file", err);
    return [];
  }
}

async function addTodosToFile(updatedTodos) {
  try {
    let contentToBeWriten = JSON.stringify(updatedTodos, null, 2);
    await fs.promises.writeFile(__dirname + "/myTodos.json", contentToBeWriten);
  } catch (err) {
    console.log("error in writing to the file", err);
    return [];
  }
}

let todos = [];

getTodosFromFile().then((e) => (todos = e));

app.get("/todos", (req, res) => {
  res.status(200).send(todos);
});

app.get("/todos/:id", (req, res) => {
  const fetchedTodoIndex = todos.findIndex((todo) => todo.id === req.params.id);
  if (fetchedTodoIndex === -1) {
    res
      .status(404)
      .send({ msg: `todo with id ${req.params.id} does not exist` });
  } else {
    res.status(200).send(todos[fetchedTodoIndex]);
  }
});

app.post("/todos", async (req, res) => {
  const newTodo = req.body;
  const newTodoId = addTodo(newTodo);
  await addTodosToFile(todos);
  res.status(201).send({ msg: "todo created", id: newTodoId });
});

app.put("/todos/:id", async (req, res) => {
  const updateIndex = todos.findIndex((todo) => todo.id === req.params.id);
  if (updateIndex === -1) {
    res
      .status(404)
      .send({ msg: `todo with id ${req.params.id} does not exist` });
  } else {
    todos[updateIndex] = { ...todos[updateIndex], ...req.body };
    await addTodosToFile(todos);
    res.status(200).send(todos[updateIndex]);
  }
});

app.delete("/todos/:id", async (req, res) => {
  const delIndex = todos.findIndex((todo) => todo.id === req.params.id);
  if (delIndex === -1) {
    res
      .status(404)
      .send({ msg: `todo with id ${req.params.id} does not exist` });
  } else {
    const deletedTodo = todos.splice(delIndex, 1)[0];
    await addTodosToFile(todos);
    res.status(200).send({
      msg: `the following todo was deleted`,
      deletedTodo: deletedTodo,
    });
  }
});

app.use((req, res) => {
  res.status(404).send({ msg: "invalid route" });
});

module.exports = app;

app.listen(8081);
