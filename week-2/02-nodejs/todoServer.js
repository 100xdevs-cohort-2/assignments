/**
  You need to create an express HTTP server in Node.js which will handle the logic of a todos list app.
  - Don't use any database, just store all the data in an array to store the todos list data (in-memory)
  - Hard todos: Try to save responses in files, so that even if u exit the app and run it again, the data remains (similar to databases)

  Each todos has a title and a description. The title is a string and the description is a string.
  Each todos should also get an unique autogenerated id every time it is created
  The expected API endpoints are defined below,
  1.GET /todos - Retrieve all todos items
    Description: Returns a list of all todos items.
    Response: 200 OK with an array of todos items in JSON format.
    Example: GET http://localhost:3000/todos
    
  2.GET /todos/:id - Retrieve a specific todos item by ID
    Description: Returns a specific todos item identified by its ID.
    Response: 200 OK with the todos item in JSON format if found, or 404 Not Found if not found.
    Example: GET http://localhost:3000/todos/123
    
  3. POST /todos - Create a new todos item
    Description: Creates a new todos item.
    Request Body: JSON object representing the todos item.
    Response: 201 Created with the ID of the created todos item in JSON format. eg: {id: 1}
    Example: POST http://localhost:3000/todos
    Request Body: { "title": "Buy groceries", "completed": false, description: "I should buy groceries" }
    
  4. PUT /todos/:id - Update an existing todos item by ID
    Description: Updates an existing todos item identified by its ID.
    Request Body: JSON object representing the updated todos item.
    Response: 200 OK if the todos item was found and updated, or 404 Not Found if not found.
    Example: PUT http://localhost:3000/todos/123
    Request Body: { "title": "Buy groceries", "completed": true }
    
  5. DELETE /todos/:id - Delete a todos item by ID
    Description: Deletes a todos item identified by its ID.
    Response: 200 OK if the todos item was found and deleted, or 404 Not Found if not found.
    Example: DELETE http://localhost:3000/todos/123

    - For any other route not defined in the server return 404

  Testing the server - run `npm run test-todoServer` command in terminal
 */

  const express = require('express');

  const bodyParser = require('body-parser');

  app.use(bodyParser.json());

  function generateId(){
    return Math.ceil(Math.random() *100000);
  }

  let todos=[]

  const app = express();

   app.get('/todos',(req,res)=>{
   res.status(200).json(todos);
  })

app.get('/todos/:id',(req,res)=>{
  const id=parseInt(req.params.id);
  let foundId=-1;
  foundId=todos.findIndex((item)=>{
  return item.id===id;
  })
  if(foundId==-1){
    res.status(404).send('Not Found');
  } else{
    res.status(200).json(todos[foundId]);
  }  
})

app.post('/todos',(req, res)=>{
const newTodo={
id:generateId(),
title: req.body.title,
description: req.body.description
} 
todos.push(newTodo);
res.status(201).json(todos);
})

app.put('/todos/:id',(req,res) => {
const id=parseInt(req.params.id);
const itemIndex=todos.findIndex((item)=>{
  return item.id === id;
});

 if(itemIndex===-1){
res.status(404).send('not found');
} else{
  todos[itemIndex].title=req.body.title;
  todos[itemIndex].description=req.body.description;
  res.status(200).json(todos[itemIndex]);
}
})

app.delete('/todos/:id',(req,res)=>{
  const id=parseInt(req.params.id);
const itemIndex=todos.findIndex((item)=>{
  return item.id === id;
});
if(itemIndex===-1){
  res.status(404).send('not found');
  }
  else{
    todos.splice(itemIndex,1);
    res.status(200).send(todos)
  }

})

app.use((req,res)=>{
  res.status(404).send("not found")
})

  

  app.listen(port,()=>{
    console.log(`server is running on port ${port}`)
  })

  module.exports = app;