/**
  You need to create an express HTTP server in Node.js which will handle the logic of a todo list app.
  - Don't use any database, just store all the data in an array to store the todo list data (in-memory)
  - Hard todo: Try to save responses in files, so that even if u exit the app and run it again, the data remains (similar to databases)

  Each todo has a title and a description. The title is a string and the description is a string.
  Each todo should also get an unique autogenerated id every time it is created
  The expected API endpoints are defined below,
  1.GET /todos - Retrieve all todo items
    Description: Returns a list of all todo items.
    Response: 200 OK with an array of todo items in JSON format.
    Example: GET http://localhost:3000/todos
    
  2.GET /todos/:id - Retrieve a specific todo item by ID
    Description: Returns a specific todo item identified by its ID.
    Response: 200 OK with the todo item in JSON format if found, or 404 Not Found if not found.
    Example: GET http://localhost:3000/todos/123
    
  3. POST /todos - Create a new todo item
    Description: Creates a new todo item.
    Request Body: JSON object representing the todo item.
    Response: 201 Created with the ID of the created todo item in JSON format. eg: {id: 1}
    Example: POST http://localhost:3000/todos
    Request Body: { "title": "Buy groceries", "completed": false, description: "I should buy groceries" }
    
  4. PUT /todos/:id - Update an existing todo item by ID
    Description: Updates an existing todo item identified by its ID.
    Request Body: JSON object representing the updated todo item.
    Response: 200 OK if the todo item was found and updated, or 404 Not Found if not found.
    Example: PUT http://localhost:3000/todos/123
    Request Body: { "title": "Buy groceries", "completed": true }
    
  5. DELETE /todos/:id - Delete a todo item by ID
    Description: Deletes a todo item identified by its ID.
    Response: 200 OK if the todo item was found and deleted, or 404 Not Found if not found.
    Example: DELETE http://localhost:3000/todos/123

    - For any other route not defined in the server return 404

  Testing the server - run `npm run test-todoServer` command in terminal
 */
const express = require("express");
const bodyParser = require("body-parser");
 

const app = express();
app.use(express.json());
app.use(bodyParser.json());
function generateTodoId() {
  return "id" + Math.floor(100 + Math.random() * 900);
}
const allTodos = [
  {
    id: 123,
    title: "Workout1",
    description: "Go to gym at 6am ",
  },
  {
    id: 122,
    title: "Workout2",
    description: "Go to gym at 6am ",
  },
  {
    id: 121,
    title: "Meal",
    description: "Eat a healthy diet",
  },
];

// Retrieve all the items in todo
app.get("/todos", function (req, res) {
  res.json({ allTodos });
});
app.get("/todos/:id", function (req, res) {
  const id = parseInt(req.params.id);
  let found = false;
  for (let i = 0; i < allTodos.length; i++) {
    if (allTodos[i].id === id) {
      found = true;
      res.json({
        title: allTodos[i].title,
        description: allTodos[i].description,
      });
    }
  }
  if (!found) {
    res.status(404).json({
      msg: "Id not found",
    });
  }
});

app.post("/todos",function(req,res){
  const newTodo = {
    id: generateTodoId(),   
    title: req.body.title,
    description: req.body.description
  };
  console.log(newTodo);
  allTodos.push(newTodo);
  res.status(201).json(newTodo);
})

app.put('/todos/:id', function(req, res){
  const todoIndex = allTodos.findIndex(t => t.id === parseInt(req.params.id));
  if(!todoIndex){
    res.status(404).json({
      msg:"invalid todo id "
    })
  }else{
    allTodos[todoIndex].title=req.body.title,
    allTodos[todoIndex].description=req.body.description
    res.json(allTodos[todoIndex]);
  }
})
app.delete("/todos/:id",function(req,res){
  const todoIndex=allTodos.findIndex(t=>t.id===parseInt(req.params.id));
  if(todoIndex==-1){
    res.status(400).send("Id cannot be negative!")
  }else{
    allTodos.splice(todoIndex,1);
    res.status(200).json({
      "msg":"Deleted Successfully"
    })
  }

})

 
app.listen(4000);
module.exports = app;
