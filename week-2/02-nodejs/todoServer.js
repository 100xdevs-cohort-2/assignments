/**
  You need to create an express HTTP server in Node.js which will handle the logic of a todo list app.
  - Don't use any database, just store all the data in an array to store the todo list data (in-memory)
  - Hard todo: Try to save responses in files, so that even if u exit the app and run it again, the data remains (similar to databases)

  Each todo has a title and a description. The title is a string and the description is a string.
  Each todo should also get an unique autogenerated id every time it is created
  The expected API endpoints are defined below,
  1.GET /todos - Retrieve all todo items
    Description: Returns a list of all todo items.
    Response: 200 OK with an array of todo items in JSON format.
    Example: GET http://localhost:3000/todos
    
  2.GET /todos/:id - Retrieve a specific todo item by ID
    Description: Returns a specific todo item identified by its ID.
    Response: 200 OK with the todo item in JSON format if found, or 404 Not Found if not found.
    Example: GET http://localhost:3000/todos/123
    
  3. POST /todos - Create a new todo item
    Description: Creates a new todo item.
    Request Body: JSON object representing the todo item.
    Response: 201 Created with the ID of the created todo item in JSON format. eg: {id: 1}
    Example: POST http://localhost:3000/todos
    Request Body: { "title": "Buy groceries", "completed": false, description: "I should buy groceries" }
    
  4. PUT /todos/:id - Update an existing todo item by ID
    Description: Updates an existing todo item identified by its ID.
    Request Body: JSON object representing the updated todo item.
    Response: 200 OK if the todo item was found and updated, or 404 Not Found if not found.
    Example: PUT http://localhost:3000/todos/123
    Request Body: { "title": "Buy groceries", "completed": true }
    
  5. DELETE /todos/:id - Delete a todo item by ID
    Description: Deletes a todo item identified by its ID.
    Response: 200 OK if the todo item was found and deleted, or 404 Not Found if not found.
    Example: DELETE http://localhost:3000/todos/123

    - For any other route not defined in the server return 404

  Testing the server - run `npm run test-todoServer` command in terminal
 */
const express = require("express");
const bodyParser = require("body-parser");
const fs = require("fs");
const z = require("zod");
const app = express();

app.use(bodyParser.json());

let todo_list = [];
let id = 1;

const todoSchema = z.object({
  title: z.string(),
  description: z.string(),
});

function load_data(req, res, next) {
  fs.readFile("db.txt", "utf-8", function (err, data) {
    if (err) {
      console.log("Creating file db.txt");
      fs.writeFile("db.txt", "{}", function (err) {
        if (err) {
          console.log(err);
        }
      });
    } else {
      let data_json = JSON.parse(data);
      todo_list = data_json.todo_list;
      id = data_json.id;
    }
  });
  next();
}

function write_data(todo_list, id) {
  let data_json = { todo_list: todo_list, id: id };
  fs.writeFile("db.txt", JSON.stringify(data_json), function (err) {
    if (err) {
      console.log(err, data_json);
    }
  });
}

function schemaMiddleware(req, res, next) {
  const todos = req.body;
  const response = todoSchema.safeParse(todos);
  if (!response.success) {
    res.status(422).json({
      msg: "Input is invalid",
    });
    return;
  }
  next();
}

app.use(load_data);

app.get("/todos", function (req, res) {
  console.log("GET", todo_list);
  res.status(200).json(todo_list);
});

app.get("/todos/:id", function (req, res) {
  todo_id = req.params.id;
  // console.log(todo_list);
  for (let i = 0; i < todo_list.length; i++) {
    // console.log(todo_list[i], todo_list[i].id);
    if (todo_list[i].id == todo_id) {
      console.log("GET ID", todo_list[i]);
      res.status(200).json(todo_list[i]);
      return;
    }
  }
  res.status(404).send("Todo Not Found");
  return;
});

app.post("/todos", schemaMiddleware, function (req, res) {
  req.body.id = id;
  id++;
  todo_list.push(req.body);
  // console.log("POST", todo_list);
  res.status(201).json({
    id: req.body.id,
  });
  write_data(todo_list, id);
});

app.put("/todos/:id", function (req, res) {
  todo_id = req.params.id;
  todo_item = req.body;
  for (let i = 0; i < todo_list.length; i++) {
    if (todo_list[i].id == todo_id) {
      todo_item.id = todo_id;
      todo_list[i] = todo_item;
      res.status(200).json(todo_item);
      write_data(todo_list, id);
      return;
    }
  }
  res.status(404).send("Todo Not Found");
  return;
});

app.delete("/todos/:id", function (req, res) {
  todo_id = req.params.id;
  for (let i = 0; i < todo_list.length; i++) {
    if (todo_list[i].id == todo_id) {
      todo_list.splice(i, 1);
      res.status(200).send("Item deleted successfully");
      write_data(todo_list, id);
      return;
    }
  }
  res.status(404).send("Todo Not Found");
  return;
});

app.all("*", function (req, res) {
  res.status(404).send("Route not found");
});

// app.listen(3000, function () {
//   console.log("Server running at port 3000");
// });

module.exports = app;
