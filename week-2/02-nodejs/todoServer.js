/**
  You need to create an express HTTP server in Node.js which will handle the logic of a todo list app.
  - Don't use any database, just store all the data in an array to store the todo list data (in-memory)
  - Hard todo: Try to save responses in files, so that even if u exit the app and run it again, the data remains (similar to databases)

  Each todo has a title and a description. The title is a string and the description is a string.
  Each todo should also get an unique autogenerated id every time it is created
  The expected API endpoints are defined below,
  1.GET /todos - Retrieve all todo items
    Description: Returns a list of all todo items.
    Response: 200 OK with an array of todo items in JSON format.
    Example: GET http://localhost:3000/todos
    
  2.GET /todos/:id - Retrieve a specific todo item by ID
    Description: Returns a specific todo item identified by its ID.
    Response: 200 OK with the todo item in JSON format if found, or 404 Not Found if not found.
    Example: GET http://localhost:3000/todos/123
    
  3. POST /todos - Create a new todo item
    Description: Creates a new todo item.
    Request Body: JSON object representing the todo item.
    Response: 201 Created with the ID of the created todo item in JSON format. eg: {id: 1}
    Example: POST http://localhost:3000/todos
    Request Body: { "title": "Buy groceries", "completed": false, description: "I should buy groceries" }
    
  4. PUT /todos/:id - Update an existing todo item by ID
    Description: Updates an existing todo item identified by its ID.
    Request Body: JSON object representing the updated todo item.
    Response: 200 OK if the todo item was found and updated, or 404 Not Found if not found.
    Example: PUT http://localhost:3000/todos/123
    Request Body: { "title": "Buy groceries", "completed": true }
    
  5. DELETE /todos/:id - Delete a todo item by ID
    Description: Deletes a todo item identified by its ID.
    Response: 200 OK if the todo item was found and deleted, or 404 Not Found if not found.
    Example: DELETE http://localhost:3000/todos/123

    - For any other route not defined in the server return 404

  Testing the server - run `npm run test-todoServer` command in terminal
 */
  const express = require('express');
  const bodyParser = require('body-parser');
  const { v4: uuidv4 } = require('uuid');
  const fs = require('fs/promises');

  const PORT = process.env.PORT || 5000;
  
  const app = express();

  const FILE_NAME = './todos.json'

  app.use(bodyParser.json());

  async function getToDos()
  {
    // read the file
    let todosJson = '[]';
    try
    {
      todosJson = await fs.readFile(FILE_NAME, {encoding: 'utf-8'});;
    }
    catch (err) {
      console.error(`Error: ${err}`);
      if(err.code === "ENOENT")
      {
        await fs.writeFile(FILE_NAME, '[]');
      }      
    }

    const toDos = JSON.parse(todosJson);
    return toDos;
  }

  async function writeToDos(toDos)
  {
    await fs.writeFile(FILE_NAME, JSON.stringify(toDos));
  }

  app.get('/todos', async (req, res) => {
    const toDos = await getToDos();
    res.json(toDos);
  })

  app.get('/todos/:id', async (req, res) => {

    const toDos = await getToDos();

    const todo = toDos.find(todo => req.params.id === todo.id);
    
    if(todo)
    {
      res.json(todo);
    }
    else
    {
      res.status(404).send();
    }    
  })

  app.post('/todos', async (req, res) =>{
    const toDo = {
      id: uuidv4(),
      ...req.body
    };

    const toDos = await getToDos();

    toDos.push(toDo);

    await writeToDos(toDos);

    res.status(201).json(toDo);
  })

  app.put('/todos/:id', async (req, res) => {

    const toDos = await getToDos();

    const todoIndex = toDos.findIndex(t => t.id === req.params.id);
    if (todoIndex === -1) {
      res.status(404).send();
    } else {
      toDos[todoIndex].title = req.body.title;
      toDos[todoIndex].completed = req.body.completed;
      await writeToDos(toDos);
      res.json(toDos[todoIndex]);
    }

   });

  app.delete('/todos/:id', async (req, res) => {

    const toDos = await getToDos();

    const todoIndex = toDos.findIndex(todo => req.params.id === todo.id);

    if(todoIndex !== -1)
    {
      toDos.splice(todoIndex, 1);
      await writeToDos(toDos);
      res.status(200).send();
    }
    else {
      res.status(404).send();
    }
  });

  app.use((req, res, next) => {
    res.status(404).send();
  });

  app.listen(PORT);
  
  module.exports = app;