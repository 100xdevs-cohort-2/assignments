/**
 You need to create an express HTTP server in Node.js which will handle the logic of a todo list app.
 - Don't use any database, just store all the data in an array to store the todo list data (in-memory)
 - Hard todo: Try to save responses in files, so that even if u exit the app and run it again, the data remains (similar to databases)

 Each todo has a title and a description. The title is a string and the description is a string.
 Each todo should also get an unique autogenerated id every time it is created
 The expected API endpoints are defined below,
 1.GET /todos - Retrieve all todo items
 Description: Returns a list of all todo items.
 Response: 200 OK with an array of todo items in JSON format.
 Example: GET http://localhost:3000/todos

 2.GET /todos/:id - Retrieve a specific todo item by ID
 Description: Returns a specific todo item identified by its ID.
 Response: 200 OK with the todo item in JSON format if found, or 404 Not Found if not found.
 Example: GET http://localhost:3000/todos/123

 3. POST /todos - Create a new todo item
 Description: Creates a new todo item.
 Request Body: JSON object representing the todo item.
 Response: 201 Created with the ID of the created todo item in JSON format. eg: {id: 1}
 Example: POST http://localhost:3000/todos
 Request Body: { "title": "Buy groceries", "completed": false, description: "I should buy groceries" }

 4. PUT /todos/:id - Update an existing todo item by ID
 Description: Updates an existing todo item identified by its ID.
 Request Body: JSON object representing the updated todo item.
 Response: 200 OK if the todo item was found and updated, or 404 Not Found if not found.
 Example: PUT http://localhost:3000/todos/123
 Request Body: { "title": "Buy groceries", "completed": true }

 5. DELETE /todos/:id - Delete a todo item by ID
 Description: Deletes a todo item identified by its ID.
 Response: 200 OK if the todo item was found and deleted, or 404 Not Found if not found.
 Example: DELETE http://localhost:3000/todos/123

 - For any other route not defined in the server return 404

 Testing the server - run `npm run test-todoServer` command in terminal
 */


const express = require('express');
const bodyParser = require('body-parser');
const fs = require('fs').promises; // Use fs.promises for async/await support
const { v4: uuidv4 } = require('uuid');
const app = express();
const PORT = 3000;

app.use(bodyParser.json());

const todosFile = 'todos.json';

async function toReadFile() {
  try {
    const data = await fs.readFile(todosFile, 'utf-8');
    return JSON.parse(data);
  } catch (err) {
    return [];
  }
}

async function toWriteFile(todos) {
  try {
    await fs.writeFile(todosFile, JSON.stringify(todos, null, 2));
  } catch (err) {
    console.error(err);
  }
}

async function main() {
  todos = await toReadFile();
}
main();

app.get('/todos', async (req, res) => {
  res.status(200).json(todos);
});

app.get('/todos/:id', async (req, res) => {
  const id = req.params.id;
  const todo = todos.find(function(todo) {
    return todo.id === id;
  });

  if (todo) {
    res.status(200).json(todo);
  } else {
    res.status(404).send('Todo not found');
  }
});


app.post('/todos', async (req, res) => {
  const { title, completed,description } = req.body;
  if (!title || !description) {
    return res.status(400).send('Title and Description are required:');
  }

  const newTodo = {
    id: uuidv4(),
    title,
    completed,
    description

  };
  todos.push(newTodo);
  await toWriteFile(todos);
  res.status(201).json({ id: newTodo.id });
});

app.put('/todos/:id', async (req, res) => {
  const id = req.params.id;
  const index = todos.findIndex(todo => todo.id === id);
  if (index !== -1) {
    todos[index] = { ...todos[index], ...req.body };
    await toWriteFile(todos);
    res.status(200).json(todos[index]);
  } else {
    res.status(404).send('Todo not found');
  }
});

app.delete('/todos/:id', async (req, res) => {
  const id = req.params.id;
  const index = todos.findIndex(todo => todo.id === id);
  if (index !== -1) {
    todos.splice(index, 1);
    await toWriteFile(todos);
    res.status(200).send('Todo deleted');
  } else {
    res.status(404).send('Todo not found');
  }
});

app.listen(PORT, err => {
  if (err) console.error(err);
  console.log(`Server running on port: PORT`);
});

module.exports = app;
