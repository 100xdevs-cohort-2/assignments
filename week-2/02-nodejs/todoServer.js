/**
  You need to create an express HTTP server in Node.js which will handle the logic of a todo list app.
  - Don't use any database, just store all the data in an array to store the todo list data (in-memory)
  - Hard todo: Try to save responses in files, so that even if u exit the app and run it again, the data remains (similar to databases)

  Each todo has a title and a description. The title is a string and the description is a string.
  Each todo should also get an unique autogenerated id every time it is created
  The expected API endpoints are defined below,
  1.GET /todos - Retrieve all todo items
    Description: Returns a list of all todo items.
    Response: 200 OK with an array of todo items in JSON format.
    Example: GET http://localhost:3000/todos
    
  2.GET /todos/:id - Retrieve a specific todo item by ID
    Description: Returns a specific todo item identified by its ID.
    Response: 200 OK with the todo item in JSON format if found, or 404 Not Found if not found.
    Example: GET http://localhost:3000/todos/123
    
  3. POST /todos - Create a new todo item
    Description: Creates a new todo item.
    Request Body: JSON object representing the todo item.
    Response: 201 Created with the ID of the created todo item in JSON format. eg: {id: 1}
    Example: POST http://localhost:3000/todos
    Request Body: { "title": "Buy groceries", "completed": false, description: "I should buy groceries" }
    
  4. PUT /todos/:id - Update an existing todo item by ID
    Description: Updates an existing todo item identified by its ID.
    Request Body: JSON object representing the updated todo item.
    Response: 200 OK if the todo item was found and updated, or 404 Not Found if not found.
    Example: PUT http://localhost:3000/todos/123
    Request Body: { "title": "Buy groceries", "completed": true }
    
  5. DELETE /todos/:id - Delete a todo item by ID
    Description: Deletes a todo item identified by its ID.
    Response: 200 OK if the todo item was found and deleted, or 404 Not Found if not found.
    Example: DELETE http://localhost:3000/todos/123

    - For any other route not defined in the server return 404

  Testing the server - run `npm run test-todoServer` command in terminal
 */
const express = require('express');
const fs = require('fs');
const path = require('path');
const {v4: uuidv4} = require('uuid');

const app = express();

// app.use(bodyParser.json());
app.use(express.json());

app.get('/todos', (req, res) => {
  const data = fs.readFileSync(path.join(__dirname, 'todos.json'), 'utf-8');
  if (data) {
    res.status(200).send(JSON.parse(data));
  }
  else {
    res.status(404).send('There are no todos');
  }
});

app.get('/todos/:id', (req, res) => {
  const data = fs.readFileSync(path.join(__dirname, 'todos.json'), 'utf-8');
  let todos = JSON.parse(data);
  const todo = todos.find(todo => todo.id === req.params.id);
  if (todo) {
    res.status(200).send(todo);
  }
  else {
    res.status(404).json({msg: 'Todo not Found'});
  }
});

app.post('/todos', (req, res) => {
  let todo = req.body;
  todo = {...todo, id: uuidv4()};
  const data = fs.readFileSync(path.join(__dirname, 'todos.json'), 'utf-8');
  let todos = JSON.parse(data);
  todos.push(todo);
  const storedTodos = todos.map(todo => JSON.stringify(todo));
  fs.writeFile(path.join(__dirname, 'todos.json'), '[' + storedTodos.toString() + ']', (err, data) => {});
  res.status(201).json({id: todo.id});
});

app.put('/todos/:id', (req, res) => {
  const data = fs.readFileSync(path.join(__dirname, 'todos.json'), 'utf-8');
  let todos = JSON.parse(data);
  const todo = todos.find(todo => todo.id === req.params.id);
  const updatedTodo = req.body;
  updatedTodo.id = req.params.id;
  if (todo) {
    let todoIndex = todos.indexOf(todo);
    todos = [...todos.slice(0, todoIndex), updatedTodo, ...todos.slice(todoIndex + 1,)];
    const storedTodos = todos.map(todo => JSON.stringify(todo));
    fs.writeFile(path.join(__dirname, 'todos.json'), '[' + storedTodos.toString() + ']', (err, data) => {});
    res.status(200).json({msg: 'Updated the item'});
  }
  else {
    res.status(404).json({msg: "Todo not Found"});
  }
});

app.delete('/todos/:id', (req, res) => {
  const data = fs.readFileSync(path.join(__dirname, 'todos.json'), 'utf-8');
  let todos = JSON.parse(data);
  const todo = todos.find(todo => todo.id === req.params.id);
  if (todo) {
    todos.splice(todos.indexOf(todo), 1);
    const storedTodos = todos.map(todo => JSON.stringify(todo));
    fs.writeFile(path.join(__dirname, 'todos.json'), '[' + storedTodos.toString() + ']', (err, data) => {});
    res.status(200).json({msg: 'Deleted the todo with' + req.params.id});
  }
  else {
    res.status(404).json({msg: 'Todo not Found'});
  }
});

app.listen(8000);
module.exports = app;