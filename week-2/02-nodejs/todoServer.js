/**
  You need to create an express HTTP server in Node.js which will handle the logic of a todo list app.
  - Don't use any database, just store all the data in an array to store the todo list data (in-memory)
  - Hard todo: Try to save responses in files, so that even if u exit the app and run it again, the data remains (similar to databases)

  Each todo has a title and a description. The title is a string and the description is a string.
  Each todo should also get an unique autogenerated id every time it is created
  The expected API endpoints are defined below,
  1.GET /todos - Retrieve all todo items
    Description: Returns a list of all todo items.
    Response: 200 OK with an array of todo items in JSON format.
    Example: GET http://localhost:3000/todos
    
  2.GET /todos/:id - Retrieve a specific todo item by ID
    Description: Returns a specific todo item identified by its ID.
    Response: 200 OK with the todo item in JSON format if found, or 404 Not Found if not found.
    Example: GET http://localhost:3000/todos/123
    
  3. POST /todos - Create a new todo item
    Description: Creates a new todo item.
    Request Body: JSON object representing the todo item.
    Response: 201 Created with the ID of the created todo item in JSON format. eg: {id: 1}
    Example: POST http://localhost:3000/todos
    Request Body: { "title": "Buy groceries", "completed": false, description: "I should buy groceries" }
    
  4. PUT /todos/:id - Update an existing todo item by ID
    Description: Updates an existing todo item identified by its ID.
    Request Body: JSON object representing the updated todo item.
    Response: 200 OK if the todo item was found and updated, or 404 Not Found if not found.
    Example: PUT http://localhost:3000/todos/123
    Request Body: { "title": "Buy groceries", "completed": true }
    
  5. DELETE /todos/:id - Delete a todo item by ID
    Description: Deletes a todo item identified by its ID.
    Response: 200 OK if the todo item was found and deleted, or 404 Not Found if not found.
    Example: DELETE http://localhost:3000/todos/123

    - For any other route not defined in the server return 404

  Testing the server - run `npm run test-todoServer` command in terminal
 */
  const express = require('express');
  const bodyParser = require('body-parser');
  const fs = require("fs");
  
  const app = express();
  
  app.use(bodyParser.json());


  let todoNumber=1;

  app.get("/todos",function(req,res){
    fs.readFile("todos.json","utf-8",function(err,data){
      if(err){
        throw err;
      }
      let todoList = JSON.parse(data);
      res.status(200).json(todoList);
    })
  })

  app.get("/todos/:id",function(req,res){
    const todoId = parseInt(req.params.id);

    fs.readFile("todos.json","utf-8",function(err,data){
      if(err){
        throw err;
      }
      let todoList = JSON.parse(data);
      todoList.forEach(function(item){
        if(item.id==todoId){
          return res.status(200).json(item);
        }
      })

      return res.status(404).send();
        
      });
  })


  app.post("/todos",function(req,res){
    const todoTitle = req.body.title;
    const todoDesc = req.body.description;

    let newTodo = {
      id:todoNumber,
      title:todoTitle,
      description:todoDesc
    }
    todoNumber++;

    fs.readFile("todos.json","utf-8",function(err,data){
      let todoList = JSON.parse(data);
      todoList.push(newTodo);
      fs.writeFile("todos.json",JSON.stringify(todoList),function(err,data){
        res.status(201).json({id:newTodo.id});
      })
    })
  })


  app.put("/todos/:id",function(req,res){
    const todoId = parseInt(req.params.id);
    const todoTitle = req.body.title;
    const todoDesc = req.body.description;

    fs.readFile("todos.json","utf-8",function(err,data){
      if(err){
        throw err;
      }

      let todoList = JSON.parse(data);
      for(let i=0;i<todoList.length;i++){
        if(todoList[i].id==todoId){
          todoList[i].title=todoTitle;
          todoList[i].description=todoDesc;
          return res.json(todoList[i]);
        }
      }
      res.send(404).send();
    })
  })

  app.delete("/todos/:id",function(req,res){
    const todoId = req.params.id;
    fs.readFile("todos.json","utf-8",function(err,data){
      if(err){
        throw err;
      }

      let todoList = JSON.parse(data);
      for(let i=0;i<todoList.length;i++){
        if(todoList[i].id==todoId){
          todoList.splice(i,1);
          fs.writeFile("todos.json",JSON.stringify(todoList),function(err,data){
            if(err){
              throw err;
            }
          })
          return res.status(200).send("Todo deleted successfully");
        }
      }

      res.status(404).send("Todo not found");

    })
  })
  // app.get("/todos",function(req,res){
  //   res.status(200).json(todoList);
  // })

  // app.get("/todos/:id",function(req,res){
  //   const todoId = parseInt(req.params.id);

  //   todoList.forEach(function(item){
  //     if(item.id==todoId){
  //       return res.status(200).json(item);
  //     }
  //   })

  //   res.status(404).json({error:"Todo not found"});
  // })

  // app.post("/todos",function(req,res){
  //   const todoTitle = req.body.title;
  //   const todoDesc = req.body.description;

  //   let newTodo = {
  //     id:todoNumber,
  //     title:todoTitle,
  //     description:todoDesc
  //   }
  //   todoNumber++;

  //   todoList.push(newTodo);
  //   res.status(201).json({id:newTodo.id});

  // })

  // app.put("/todos/:id",function(req,res){
  //   const todoId = parseInt(req.params.id);
  //   const todoTitle = req.body.title;
  //   const todoDesc = req.body.description;

  //   for(let i=0;i<todoList.length;i++){
  //     if(todoList[i].id==todoId){
  //       if(todoTitle!=undefined){
  //         todoList[i].title=todoTitle;
  //       }
  //       if(todoDesc!=undefined){
  //         todoList[i].description=todoDesc;

  //       }
        
  //       return res.json(todoList[i]);
  //     }
  //   }

  //   res.status(404).send();
  // })

  // app.delete("/todos/:id",function(req,res){
  //   const todoId = parseInt(req.params.id);

  //   for(let i=0;i<todoList.length;i++){
  //     if(todoList[i].id==todoId){
  //       todoList.splice(i,1);
  //       return res.status(200).send("Todo deleted successfully");
  //     }
  //   }

  //   res.status(404).send("Todo not found");
  // })

  app.all("*",function(req,res){
    res.status(404).send("Route not found");
  })


  




  
  module.exports = app;