/**
  You need to create an express HTTP server in Node.js which will handle the logic of a todo list app.
  - Don't use any database, just store all the data in an array to store the todo list data (in-memory)
  - Hard todo: Try to save responses in files, so that even if u exit the app and run it again, the data remains (similar to databases)

  Each todo has a title and a description. The title is a string and the description is a string.
  Each todo should also get an unique autogenerated id every time it is created
  The expected API endpoints are defined below,
  1.GET /todos - Retrieve all todo items
    Description: Returns a list of all todo items.
    Response: 200 OK with an array of todo items in JSON format.
    Example: GET http://localhost:3000/todos
    
  2.GET /todos/:id - Retrieve a specific todo item by ID
    Description: Returns a specific todo item identified by its ID.
    Response: 200 OK with the todo item in JSON format if found, or 404 Not Found if not found.
    Example: GET http://localhost:3000/todos/123
    
  3. POST /todos - Create a new todo item
    Description: Creates a new todo item.
    Request Body: JSON object representing the todo item.
    Response: 201 Created with the ID of the created todo item in JSON format. eg: {id: 1}
    Example: POST http://localhost:3000/todos
    Request Body: { "title": "Buy groceries", "completed": false, description: "I should buy groceries" }
    
  4. PUT /todos/:id - Update an existing todo item by ID
    Description: Updates an existing todo item identified by its ID.
    Request Body: JSON object representing the updated todo item.
    Response: 200 OK if the todo item was found and updated, or 404 Not Found if not found.
    Example: PUT http://localhost:3000/todos/123
    Request Body: { "title": "Buy groceries", "completed": true }
    
  5. DELETE /todos/:id - Delete a todo item by ID
    Description: Deletes a todo item identified by its ID.
    Response: 200 OK if the todo item was found and deleted, or 404 Not Found if not found.
    Example: DELETE http://localhost:3000/todos/123

    - For any other route not defined in the server return 404

  Testing the server - run `npm run test-todoServer` command in terminal
 */
  const express = require('express');
  const bodyParser = require('body-parser');

  const app = express();

  app.use(bodyParser.json());

  const todos = new Map();
  let noteId = 100; 

  function isTodoListEmpty() {
    return (todos.length != 0);
  }

  function isTodoPresent(id) {
    return todos.has(id);
  }

  function generateId() {
    return noteId++;
  }

  function isUndefined(value) {
    return typeof value === 'undefined';
  }

  // 1.GET /todos - Retrieve all todo items
  app.get('/todos', (req, res) => {
    if (isTodoListEmpty()) {
      res.sendStatus(200).json(
        todos
      );
    } else {
      res.sendStatus(404).send(
        "You haven't added any todos yet."
      );
    }
  })

  // 2.GET /todos/:id - Retrieve a specific todo item by ID
  app.get('/todos/:id', (req, res) => {
    if (isTodoPresent(id)) {
      res.sendStatus(200).json(
        todos[id]
      );
    } else {
      res.sendStatus(404).json(
        "There doesn't exist such note."
      )
    }
  })

  // 3. POST /todos - Create a new todo item
  app.post('/todos', (req, res) => {
    const id = generateId();
    const title = req.body.title;
    const completed = req.body.completed;
    const description = req.body.description;

    const noteBody = {
      "title": title,
      "completed": completed,
      "description": description
    };

    todos.set(id, noteBody);

    res.sendStatus(201).json({
      id: id
    })
  })
  
  // 4. PUT /todos/:id - Update an existing todo item by ID
  app.put('/todos/:id', (req, res) => {
    if (isTodoPresent(id)) {
      if (!isUndefined(req.body.title)){
        todos[id].title = req.body.title;
      }

      if (!isUndefined(req.body.completed)){
        todos[id].completed = req.body.completed;
      }

      if (!isUndefined(req.body.description)){
        todos[id].description = req.body.description;
      }

      res.sendStatus(200)
    } else {
      res.sendStatus(404).send(
        "Note with this id is not present"
      )
    }
  })

  // DELETE /todos/:id - Delete a todo item by ID
  // 5. DELETE /todos/:id - Delete a todo item by ID
  // Description: Deletes a todo item identified by its ID.
  // Response: 200 OK if the todo item was found and deleted, or 404 Not Found if not found.
  // Example: DELETE http://localhost:3000/todos/123
  app.delete('todos/:id', (req, res) => {
    if (isTodoPresent(id)) {
      todos.delete(id);

      res.sendStatus(200).send(
        "Note has been deleted"
      )
    } else {
      res.sendStatus(404).send(
        "Note with this id is not present"
      )
    }
  })

  module.exports = app;