/**
  You need to create an express HTTP server in Node.js which will handle the logic of a todo list app.
  - Don't use any database, just store all the data in an array to store the todo list data (in-memory)
  - Hard todo: Try to save responses in files, so that even if u exit the app and run it again, the data remains (similar to databases)

  Each todo has a title and a description. The title is a string and the description is a string.
  Each todo should also get an unique autogenerated id every time it is created
  The expected API endpoints are defined below,
  1.GET /todos - Retrieve all todo items
    Description: Returns a list of all todo items.
    Response: 200 OK with an array of todo items in JSON format.
    Example: GET http://localhost:3000/todos
    
  2.GET /todos/:id - Retrieve a specific todo item by ID
    Description: Returns a specific todo item identified by its ID.
    Response: 200 OK with the todo item in JSON format if found, or 404 Not Found if not found.
    Example: GET http://localhost:3000/todos/123
    
  3. POST /todos - Create a new todo item
    Description: Creates a new todo item.
    Request Body: JSON object representing the todo item.
    Response: 201 Created with the ID of the created todo item in JSON format. eg: {id: 1}
    Example: POST http://localhost:3000/todos
    Request Body: { "title": "Buy groceries", "completed": false, description: "I should buy groceries" }
    
  4. PUT /todos/:id - Update an existing todo item by ID
    Description: Updates an existing todo item identified by its ID.
    Request Body: JSON object representing the updated todo item.
    Response: 200 OK if the todo item was found and updated, or 404 Not Found if not found.
    Example: PUT http://localhost:3000/todos/123
    Request Body: { "title": "Buy groceries", "completed": true }
    
  5. DELETE /todos/:id - Delete a todo item by ID
    Description: Deletes a todo item identified by its ID.
    Response: 200 OK if the todo item was found and deleted, or 404 Not Found if not found.
    Example: DELETE http://localhost:3000/todos/123

    - For any other route not defined in the server return 404

  Testing the server - run `npm run test-todoServer` command in terminal
 */
const express = require('express');
const bodyParser = require('body-parser');
const shortid = require("shortid")
const fs = require("fs").promises; 
const app = express();

// Path of the json file for local storage
const filePath = __dirname + "/todos.json";

// MIDDLEWARES
app.use(bodyParser.json());

function handleErrors(res, err)
{
  if(err.code === "ENOENT" || err.name === "Error [ERR_FS_FILE_NOT_FOUND]")
  {
    return res.status(404).json({message: "ID doesn't exists so file not found!"})
  }

  else
  {
    return res.status(500).json({message: "Internal Server Error!"});
  }
}

// ROUTES

// get all the todos 
app.get("/todos", async (req, res) => {

  try {
    const data = await fs.readFile(filePath, "utf-8");
    const todos = JSON.parse(data);
    res.status(200).json(todos);

  } 

  catch (err) 
  {
    console.error(err);
    handleErrors(res, err);
  }

});

app.route("/todos/:id")

// get a todo with a specific id
.get(async (req, res) => {
  
  const taskId = req.params.id;

  try 
  {
    const data = await fs.readFile(filePath, "utf-8");
    const todos = JSON.parse(data);
    const selectedTodo = todos.find(todo => todo.id === taskId);

    if (!selectedTodo) 
    {
      return res.status(404).json({ message: "ID not found!" });
    } 

    res.status(200).json(selectedTodo);
  } 

  catch (err) {
    console.error(err);
    handleErrors(res, err);
  }

})

// update an existing todo
.put(async (req, res) => {
  const taskId = req.params.id;

  try 
  {

    const data = await fs.readFile(filePath, "utf-8");
    let todos = JSON.parse(data);

    const updateTaskIndex = todos.findIndex(todo => todo.id === taskId);
    const toUpdateTask = todos[updateTaskIndex];

    if (!toUpdateTask) 
    { 
      return res.status(404).json({ message: "ID not found" });

    } 
    
    const newTask = { id: toUpdateTask.id, title: req.body.title, description: req.body.description, completed: req.body.completed };
    todos[updateTaskIndex] = newTask;

    await fs.writeFile(filePath, JSON.stringify(todos));
    res.status(200).json({ message: "successfully updated" });

  }

  catch (err) 
  {
    console.error(err);
    handleErrors(res, err);
  }

})
// delete a todo
.delete(async (req, res) => {
  const taskId = req.params.id;

  try {

    const data = await fs.readFile(filePath, "utf-8");
    let todos = JSON.parse(data);
    const toDelete = todos.find(todo => todo.id === taskId);

    if (!toDelete) {
      return res.status(404).json({ message: "ID not Found" });
    }

    todos = todos.filter(todo => todo.id !== taskId);
    await fs.writeFile(filePath, JSON.stringify(todos));

    res.status(200).json({ message: "Successfully deleted!", deletedTask: toDelete });

  } 

  catch (err) 
  {
    console.error(err);
    handleErrors(res, err);
  }

})

app.post("/todos", async (req, res) => {

  const title = req.body.title;
  const description = req.body.description;
  const completed = false;
  const id = shortid.generate();
  const newTask = { id: id, title: title, description: description, completed: completed };

  try 
  {
    const data = await fs.readFile(filePath, "utf-8");
    const todos = JSON.parse(data);
    todos.push(newTask);
    await fs.writeFile(filePath, JSON.stringify(todos));
    res.status(201).json({ id });
  } 

  catch (err) {
    console.error(err);
    handleErrors(res, err);
  }

});

module.exports = app;
  