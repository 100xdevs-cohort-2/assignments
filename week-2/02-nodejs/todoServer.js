/**
  You need to create an express HTTP server in Node.js which will handle the logic of a todo list app.
  - Don't use any database, just store all the data in an array to store the todo list data (in-memory)
  - Hard todo: Try to save responses in files, so that even if u exit the app and run it again, the data remains (similar to databases)

  Each todo has a title and a description. The title is a string and the description is a string.
  Each todo should also get an unique autogenerated id every time it is created
  The expected API endpoints are defined below,
  1.GET /todos - Retrieve all todo items
    Description: Returns a list of all todo items.
    Response: 200 OK with an array of todo items in JSON format.
    Example: GET http://localhost:3000/todos
    
  2.GET /todos/:id - Retrieve a specific todo item by ID
    Description: Returns a specific todo item identified by its ID.
    Response: 200 OK with the todo item in JSON format if found, or 404 Not Found if not found.
    Example: GET http://localhost:3000/todos/123
    
  3. POST /todos - Create a new todo item
    Description: Creates a new todo item.
    Request Body: JSON object representing the todo item.
    Response: 201 Created with the ID of the created todo item in JSON format. eg: {id: 1}
    Example: POST http://localhost:3000/todos
    Request Body: { "title": "Buy groceries", "completed": false, description: "I should buy groceries" }
    
  4. PUT /todos/:id - Update an existing todo item by ID
    Description: Updates an existing todo item identified by its ID.
    Request Body: JSON object representing the updated todo item.
    Response: 200 OK if the todo item was found and updated, or 404 Not Found if not found.
    Example: PUT http://localhost:3000/todos/123
    Request Body: { "title": "Buy groceries", "completed": true }
    
  5. DELETE /todos/:id - Delete a todo item by ID
    Description: Deletes a todo item identified by its ID.
    Response: 200 OK if the todo item was found and deleted, or 404 Not Found if not found.
    Example: DELETE http://localhost:3000/todos/123

    - For any other route not defined in the server return 404

  Testing the server - run `npm run test-todoServer` command in terminal
 */
  let toDoList= [];
  let id=1;
  const express = require('express');
  const bodyParser = require('body-parser');
  const fs= require('fs');

  const app = express();
  
  app.use(bodyParser.json());

  

  app.get("/todos",function(req,res){
    
    const data=fs.readFileSync("./todos.json",'utf-8');
    res.status(200).json(JSON.parse(data));

  })

  
  app.post("/todos", function(req,res){
    let newData= req.body;
    newData.id=id;
    let data=JSON.parse(fs.readFileSync("./todos.json",'utf-8'));
    data.push(newData);

    fs.writeFile("./todos.json",JSON.stringify(data), function(){
      res.status(201).json({"id":id});
      id++;
      return;
    });
    
  })

  app.put("/todos/:id", function(req,res){

    let newData= req.body;
    let todoId= parseInt(req.params.id);

    let data=JSON.parse(fs.readFileSync("./todos.json",'utf-8'));


    for(let i=0;i<data.length;i++){
      if(data[i].id===todoId){
        
        data[i]=newData;
        data[i].id=todoId;
        fs.writeFileSync("./todos.json",JSON.stringify(data));
        res.status(200).end();
          return;
      }
    }
    res.status(404).end();
  })

  app.get("/todos/:id",function(req,res){
    let toDoId= parseInt(req.params.id);
    let data=JSON.parse(fs.readFileSync("./todos.json",'utf-8'));

    for(let i=0;i<data.length;i++){
      if(data[i].id === toDoId){
        res.status(200).json(data[i]);
        return;
      }
    }
    res.status(404).end();
  })

  app.delete("/todos/:id",function(req,res){
    let toDoId=parseInt(req.params.id);
    let data=JSON.parse(fs.readFileSync("./todos.json",'utf-8'));

    for(let i=0;i<data.length;i++){
      if(toDoId===data[i].id){
        data.splice(i,1);
        fs.writeFileSync("./todos.json",JSON.stringify(data));
        res.status(200).end();
        return;
      }
    }
    res.status(400).end();
  })

  module.exports = app;

