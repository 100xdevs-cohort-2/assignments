/**
  You need to create an express HTTP server in Node.js which will handle the logic of a todo list app.
  - Don't use any database, just store all the data in an array to store the todo list data (in-memory)
  - Hard todo: Try to save responses in files, so that even if u exit the app and run it again, the data remains (similar to databases)

  Each todo has a title and a description. The title is a string and the description is a string.
  Each todo should also get an unique autogenerated id every time it is created
  The expected API endpoints are defined below,
  1.GET /todos - Retrieve all todo items
    Description: Returns a list of all todo items.
    Response: 200 OK with an array of todo items in JSON format.
    Example: GET http://localhost:3000/todos
    
  2.GET /todos/:id - Retrieve a specific todo item by ID
    Description: Returns a specific todo item identified by its ID.
    Response: 200 OK with the todo item in JSON format if found, or 404 Not Found if not found.
    Example: GET http://localhost:3000/todos/123
    
  3. POST /todos - Create a new todo item
    Description: Creates a new todo item.
    Request Body: JSON object representing the todo item.
    Response: 201 Created with the ID of the created todo item in JSON format. eg: {id: 1}
    Example: POST http://localhost:3000/todos
    Request Body: { "title": "Buy groceries", "completed": false, description: "I should buy groceries" }
    
  4. PUT /todos/:id - Update an existing todo item by ID
    Description: Updates an existing todo item identified by its ID.
    Request Body: JSON object representing the updated todo item.
    Response: 200 OK if the todo item was found and updated, or 404 Not Found if not found.
    Example: PUT http://localhost:3000/todos/123
    Request Body: { "title": "Buy groceries", "completed": true }
    
  5. DELETE /todos/:id - Delete a todo item by ID
    Description: Deletes a todo item identified by its ID.
    Response: 200 OK if the todo item was found and deleted, or 404 Not Found if not found.
    Example: DELETE http://localhost:3000/todos/123

    - For any other route not defined in the server return 404

  Testing the server - run `npm run test-todoServer` command in terminal
 */


  const express = require('express');
  const bodyParser = require('body-parser');
  const fs = require('fs');
  const app = express();
  const path = require('path');
  const { stringify } = require('querystring');
  app.use(bodyParser.json());

  class Todo{
    // generate random id
   
    // constructor for creating a todo object
    constructor(title,description){

      this.description = description;
      this.title = title;
    }

  }


  class Todos{
    
    //creates todo object with this.todos containing all todos and this.ids containing all the ids

    constructor(){
      let data = fs.readFileSync(path.join(__dirname,"todos.json"));
      this.todos = JSON.parse(data);
      this.ids = Object.keys(this.todos);
    }


    randomId(length = 6) {
      return Math.random().toString(36).substring(2, length+2);
    };

    // generate random id and check if duplicate 
    generateId(){
      let id = this.randomId();
      while (this.ids.includes(id)) {
        id = this.randomId();
      }
      this.ids.push(id);
      return id;
    }

    
    // to add a todo

    add(title, description){
      let todo = new Todo(title, description);
      let id = this.generateId();
      this.todos[id] = todo;
      fs.writeFileSync(path.join(__dirname,"todos.json"), JSON.stringify(this.todos));
      return id;
    }

    // to return todos

    getTodos(){
      return this.todos;
    }

    //to return a todo with specific id

    getTodo(id){
      return this.todos[id];
    }
  
    isPresent(id){
    return this.todos.hasOwnProperty(id);
  }
    //delete a todo by id
    deleteTodo(id){
      delete this.todos[id];
      fs.writeFileSync(path.join(__dirname,"todos.json"), JSON.stringify(this.todos));

    }

    //to update a todo
    updateTodo(id, todo){     
        this.todos[id] = todo;
        fs.writeFileSync(path.join(__dirname,"todos.json"), JSON.stringify(this.todos));
       
    }
  }


  let todos = new Todos();


  app.get("/todos", (req,res)=>{
    let data = todos.getTodos();
  res.status(200).send(JSON.stringify(data));
  })


  app.get("/todos/:id", (req,res)=>{
    let id = req.params.id;
   if(todos.isPresent(id)){
    let data = todos.getTodo(id);
    res.status(200).send(JSON.stringify(data));
    }
    res.status(404).send();
    
  }) 

  app.post("/todos", (req, res)=> {
    let title = req.body.title;
    let description = req.body.description;
    let data = {id: todos.add(title,description)}
    res.status(201).send(data);    

  })

  app.delete("/todos/:id", (req,res)=> {
    let id = req.params.id;
    if(todos.isPresent(id)){
      todos.deleteTodo(id);
      res.status(200).send();
    }
    else{
      res.status(404).send();
    }
  })

  app.put("/todos/:id", (req,res)=>{
    let id = req.params.id;
    let todo = req.body;
    if(todos.isPresent(id)){
      todos.updateTodo(id,todo);
      res.status(200).send();
    }
    else{
      res.status(404).send();
    }
  })
  
  // app.listen(3000)
  module.exports = app;